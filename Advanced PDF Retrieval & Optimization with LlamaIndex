{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1X2-C9UJF7hx3gKRCD34NZELY-GN14d2T","timestamp":1751350570138}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"ee741be771d54bcb80365f71d55273c4":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b416468d1f164154ba652f801d573c2f","IPY_MODEL_feb46929592c44e5b7470802605173bb","IPY_MODEL_712d30bd4c5f42c68fd9626b927f1ccc"],"layout":"IPY_MODEL_1bcd345d5d214355bef19cb94ea6a4b1"}},"b416468d1f164154ba652f801d573c2f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e0305e3c2b40445f8d4b3115a936da65","placeholder":"​","style":"IPY_MODEL_af54606a26e047eab365d23111bd07f5","value":"model.safetensors: 100%"}},"feb46929592c44e5b7470802605173bb":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a27b6bf5f6a64507aa49cb6334696e9f","max":90870598,"min":0,"orientation":"horizontal","style":"IPY_MODEL_78d6e3a3e4944991a3e90529cbdb59a0","value":90870598}},"712d30bd4c5f42c68fd9626b927f1ccc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fe97848e0bb74da1894e0b023277119b","placeholder":"​","style":"IPY_MODEL_d869573faaac4199b2b3b804a811ad65","value":" 90.9M/90.9M [00:00&lt;00:00, 141MB/s]"}},"1bcd345d5d214355bef19cb94ea6a4b1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e0305e3c2b40445f8d4b3115a936da65":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"af54606a26e047eab365d23111bd07f5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a27b6bf5f6a64507aa49cb6334696e9f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"78d6e3a3e4944991a3e90529cbdb59a0":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fe97848e0bb74da1894e0b023277119b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d869573faaac4199b2b3b804a811ad65":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"172b548d81604a50b5e93a6eb62965e6":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bcc55651058a4f47986eb74c5ae37be9","IPY_MODEL_c836dbe59e9448a89a7c529767e5150c","IPY_MODEL_68c0bf118f7a435db09e47692b586db6"],"layout":"IPY_MODEL_7aec078717424af9b48f8a02db50b025"}},"bcc55651058a4f47986eb74c5ae37be9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d364af555ae54adc9327222cc6c24232","placeholder":"​","style":"IPY_MODEL_76dd718c453d42baa6a44ac02d0d08ee","value":"tokenizer_config.json: "}},"c836dbe59e9448a89a7c529767e5150c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f7625f4b530b4c7da6ef3b8aaf353fe6","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_1dea58cd55c44ab5921c4c3fa51d3e3c","value":1}},"68c0bf118f7a435db09e47692b586db6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8b6ac091d6af44829471c96dadf12856","placeholder":"​","style":"IPY_MODEL_a335637e3e144b44b3ed5f7a92ae8071","value":" 1.33k/? [00:00&lt;00:00, 46.0kB/s]"}},"7aec078717424af9b48f8a02db50b025":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d364af555ae54adc9327222cc6c24232":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"76dd718c453d42baa6a44ac02d0d08ee":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f7625f4b530b4c7da6ef3b8aaf353fe6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"20px"}},"1dea58cd55c44ab5921c4c3fa51d3e3c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8b6ac091d6af44829471c96dadf12856":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a335637e3e144b44b3ed5f7a92ae8071":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f5a89e45d1564e178047b5f816aeb6ff":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_269623d166a648d5af8542274e9d3b4a","IPY_MODEL_b528a1e9a63f42b2b64868b5461d2502","IPY_MODEL_a675beebffdd4ac48307cda4808ab040"],"layout":"IPY_MODEL_486405c62f0f41e3867fd6fd94793bc8"}},"269623d166a648d5af8542274e9d3b4a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_efa7790f9b1241b8abc0538a2a2a83f2","placeholder":"​","style":"IPY_MODEL_d71121bbae874180a6cc6b040e3d3a5e","value":"vocab.txt: "}},"b528a1e9a63f42b2b64868b5461d2502":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_8d75de0dbb654d55b6650a534dce7f15","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a42c8fa12e764d87aac73a13d3ae4db5","value":1}},"a675beebffdd4ac48307cda4808ab040":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d2277df3b1f440119d90eb16e2247da1","placeholder":"​","style":"IPY_MODEL_cd4cf14bfc7646d4b58a6a00dd64cb3a","value":" 232k/? [00:00&lt;00:00, 3.20MB/s]"}},"486405c62f0f41e3867fd6fd94793bc8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"efa7790f9b1241b8abc0538a2a2a83f2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d71121bbae874180a6cc6b040e3d3a5e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8d75de0dbb654d55b6650a534dce7f15":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"20px"}},"a42c8fa12e764d87aac73a13d3ae4db5":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d2277df3b1f440119d90eb16e2247da1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cd4cf14bfc7646d4b58a6a00dd64cb3a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bb0974334c7d4bd3a09436ecb363fe9c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6e6a85f794bf45ff9ed966452d7e1649","IPY_MODEL_9b112813f608473e939bc9f4cf88d071","IPY_MODEL_11ea73676da2437f836d8d96c7312592"],"layout":"IPY_MODEL_934acbb0c7634a48822aed1f9b26415d"}},"6e6a85f794bf45ff9ed966452d7e1649":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_92d1254804354941899ef6989779d587","placeholder":"​","style":"IPY_MODEL_b46c7563dabd4509bf5e37203da84646","value":"tokenizer.json: "}},"9b112813f608473e939bc9f4cf88d071":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_872b53ee1e57457ca71f3e485d3a4532","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_23f332cec2fd4dc4993efde311faf73d","value":1}},"11ea73676da2437f836d8d96c7312592":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6dc84dfc0d7146e497e402e958e0ae5f","placeholder":"​","style":"IPY_MODEL_1407cbaf85054a52b8a47190e86cad81","value":" 711k/? [00:00&lt;00:00, 14.3MB/s]"}},"934acbb0c7634a48822aed1f9b26415d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"92d1254804354941899ef6989779d587":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b46c7563dabd4509bf5e37203da84646":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"872b53ee1e57457ca71f3e485d3a4532":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"20px"}},"23f332cec2fd4dc4993efde311faf73d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6dc84dfc0d7146e497e402e958e0ae5f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1407cbaf85054a52b8a47190e86cad81":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a7db555011da4de78af8d6bc1cf8b92f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e5ce4dffa3e44e549a814145fb694b3f","IPY_MODEL_626821ea08e841268badb1a27ab32594","IPY_MODEL_5150b6a8b3034d8c889d4ea744906806"],"layout":"IPY_MODEL_fe216d2a00d84dac83cffe28e69bcf13"}},"e5ce4dffa3e44e549a814145fb694b3f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a57f3f9136d84b0a85d366c6ba404b69","placeholder":"​","style":"IPY_MODEL_5011e9536697488cbd7ca2e0fe69807a","value":"special_tokens_map.json: 100%"}},"626821ea08e841268badb1a27ab32594":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_71ead79971df4ca689f7cf340f73bdcc","max":132,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9f75cfecef6742d8b60b79e2aa688953","value":132}},"5150b6a8b3034d8c889d4ea744906806":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1a6419d9faa340e8a8fc86f402337b97","placeholder":"​","style":"IPY_MODEL_95e3165d2d97404ba891c2d494dcbba4","value":" 132/132 [00:00&lt;00:00, 7.70kB/s]"}},"fe216d2a00d84dac83cffe28e69bcf13":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a57f3f9136d84b0a85d366c6ba404b69":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5011e9536697488cbd7ca2e0fe69807a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"71ead79971df4ca689f7cf340f73bdcc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9f75cfecef6742d8b60b79e2aa688953":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"1a6419d9faa340e8a8fc86f402337b97":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"95e3165d2d97404ba891c2d494dcbba4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b69d6b5ce7154fe3a89045ba6682987b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_cf0bf83d5f4b4ce79a35fc0072bdb09c","IPY_MODEL_a57b7aa13a974cdb9a2fce39bf8ccaba","IPY_MODEL_4463f210fa024345b41ee864a69a2fc4"],"layout":"IPY_MODEL_c5ba9c27ceff4864945df62b63713188"}},"cf0bf83d5f4b4ce79a35fc0072bdb09c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a9634d6833da4e3ab06d105617d9cb0a","placeholder":"​","style":"IPY_MODEL_175df882221246f9874c79411563ed1c","value":"README.md: "}},"a57b7aa13a974cdb9a2fce39bf8ccaba":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_be0c75c180b84b20b57cb9fe7b808289","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9e662ffb41da4eda89c1297b22dbb482","value":1}},"4463f210fa024345b41ee864a69a2fc4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3ae762aca74a4cd88c2fef873d38eb2c","placeholder":"​","style":"IPY_MODEL_c14cde72c2454941aecb276635129a83","value":" 3.66k/? [00:00&lt;00:00, 189kB/s]"}},"c5ba9c27ceff4864945df62b63713188":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a9634d6833da4e3ab06d105617d9cb0a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"175df882221246f9874c79411563ed1c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"be0c75c180b84b20b57cb9fe7b808289":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"20px"}},"9e662ffb41da4eda89c1297b22dbb482":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"3ae762aca74a4cd88c2fef873d38eb2c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c14cde72c2454941aecb276635129a83":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["# Advanced PDF Retrieval & Optimization with LlamaIndex\n","\n","This notebook builds on our previous exploration of embeddings and chunking to demonstrate advanced retrieval techniques using PDF documents. We'll explore query expansion, hybrid retrieval, and reranking to optimize the quality of search results."],"metadata":{"id":"0So_mk08pdn0"}},{"cell_type":"markdown","source":["## Section 1: Loading PDFs with PyMuPDF & LlamaIndex\n","\n","### Why are we switching to PDFs?\n","- Most real-world document search tasks involve PDFs, not plain text\n","- Using PyMuPDF allows for better text extraction with preserved structure\n","- Working with PDFs introduces real-world challenges in document processing"],"metadata":{"id":"8ynaifQKpgvw"}},{"cell_type":"markdown","source":["### Installation"],"metadata":{"id":"unD8_n5apj6l"}},{"cell_type":"code","source":["# Install required libraries\n","!pip install -q llama-index llama-index-llms-gemini pymupdf\n","!pip install -q llama-index-embeddings-huggingface\n","!pip install nest_asyncio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c4c3dU6RplP8","executionInfo":{"status":"ok","timestamp":1751351050420,"user_tz":-480,"elapsed":19860,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"c14561b6-7a67-47c5-806e-5ac6842cc79b"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: nest_asyncio in /usr/local/lib/python3.11/dist-packages (1.6.0)\n"]}]},{"cell_type":"markdown","source":["### Setting up the environment"],"metadata":{"id":"NuYQPWGNppXg"}},{"cell_type":"code","execution_count":3,"metadata":{"id":"AxzeGV4ApUhk","executionInfo":{"status":"ok","timestamp":1751351051239,"user_tz":-480,"elapsed":815,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"outputs":[],"source":["import os\n","import fitz  # PyMuPDF\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from IPython.display import Markdown, display\n","import nest_asyncio\n","\n","nest_asyncio.apply()\n","\n","# Set up Google API key for Gemini\n","GOOGLE_API_KEY = \"AIzaSyCWNe4w1pBmuwZ7tAAu1ywpl71Wl7KcCEs\"  # Replace with your actual API key\n","os.environ[\"GOOGLE_API_KEY\"] = GOOGLE_API_KEY\n","\n","# Create a directory for our PDFs if it doesn't exist\n","!mkdir -p sample_docs"]},{"cell_type":"markdown","source":["### Loading and Exploring PDF Documents\n","\n","First, let's see how to load and extract text from a PDF using PyMuPDF:"],"metadata":{"id":"2Enqs8zNpyDV"}},{"cell_type":"code","source":["from google.colab import files\n","import os\n","\n","def upload_pdf():\n","    \"\"\"Upload a PDF file and return its path.\"\"\"\n","    print(\"Please select a PDF file to upload:\")\n","    uploaded = files.upload()\n","\n","    for filename in uploaded.keys():\n","        if filename.endswith('.pdf'):\n","            # Save to the sample_docs directory\n","            pdf_path = os.path.join(\"sample_docs\", filename)\n","\n","            # Create directory if it doesn't exist\n","            os.makedirs(\"sample_docs\", exist_ok=True)\n","\n","            # Save the file\n","            with open(pdf_path, 'wb') as f:\n","                f.write(uploaded[filename])\n","\n","            print(f\"PDF saved to {pdf_path}\")\n","            return pdf_path\n","        else:\n","            print(f\"File {filename} is not a PDF. Please upload a PDF file.\")\n","\n","    return None\n","\n"],"metadata":{"id":"LznHtPrPqUqs","executionInfo":{"status":"ok","timestamp":1751351051245,"user_tz":-480,"elapsed":3,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["Here you should upload a digital pdf (PDF where you can select some text). If you don't have a PDF, you can download this [sample pdf](https://drive.google.com/file/d/1jPMktO4uODm07z5smBPNGvTdxw868Kz8/view?usp=sharing) and then upload it."],"metadata":{"id":"oy6FHRzUscEt"}},{"cell_type":"code","source":["# Uncomment to upload your own PDF\n","pdf_path = upload_pdf()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":109},"id":"DIjSU7YJqWMH","executionInfo":{"status":"ok","timestamp":1751351110706,"user_tz":-480,"elapsed":59458,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"a30358c1-f698-4206-f0b1-36d3c2735fbd"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Please select a PDF file to upload:\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-8ff8bdf9-4711-40d3-8361-44ec8191bfb2\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-8ff8bdf9-4711-40d3-8361-44ec8191bfb2\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving sample_contract.pdf to sample_contract (1).pdf\n","PDF saved to sample_docs/sample_contract (1).pdf\n"]}]},{"cell_type":"code","source":["#  Uncomment if you would like to add your own path\n","# pdf_path = \"/content/sample_docs/sample_contract.pdf\""],"metadata":{"id":"Ag1YQe1MtAsc","executionInfo":{"status":"ok","timestamp":1751351110734,"user_tz":-480,"elapsed":24,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def extract_text_from_pdf(pdf_path):\n","    \"\"\"Extract text from a PDF file using PyMuPDF.\"\"\"\n","    doc = fitz.open(pdf_path)\n","\n","    # Extract text from all pages\n","    text = \"\\n\".join([page.get_text() for page in doc])\n","\n","    # Print some stats\n","    print(f\"PDF: {pdf_path}\")\n","    print(f\"Number of pages: {len(doc)}\")\n","    print(f\"Extracted {len(text.split())} words from the PDF.\")\n","\n","    # Close the document\n","    doc.close()\n","\n","    return text\n","\n"],"metadata":{"id":"qdC0bFx_p1RL","executionInfo":{"status":"ok","timestamp":1751351110748,"user_tz":-480,"elapsed":12,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Example usage (after uploading a PDF):\n","if pdf_path:\n","    text = extract_text_from_pdf(pdf_path)\n","    print(text[:500])  # Print first 500 characte"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gk9Dk8x4p4Wv","executionInfo":{"status":"ok","timestamp":1751351110758,"user_tz":-480,"elapsed":8,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"18ca1e23-056e-4902-ccb3-ba84336c83ea"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["PDF: sample_docs/sample_contract (1).pdf\n","Number of pages: 2\n","Extracted 315 words from the PDF.\n","SERVICE AGREEMENT CONTRACT\n","This Service Agreement (the \"Agreement\") is entered into as of January 15, 2025 (the \"Effective Date\")\n","by and between:\n","ABC Company Inc., with its principal place of business at 123 Business Avenue, Corporate City, State\n","12345 (\"Service Provider\"); and\n","XYZ Corporation, with its principal place of business at 456 Commerce Street, Enterprise Town, State\n","67890 (\"Client\").\n","1. SERVICES\n","1.1 Service Provider agrees to provide Client with consulting services (\"Services\") as des\n"]}]},{"cell_type":"markdown","source":["### Integrating PyMuPDF with LlamaIndex\n","\n","Now let's set up a custom loader to integrate PyMuPDF with LlamaIndex:"],"metadata":{"id":"5mAkptZBqrTv"}},{"cell_type":"code","source":["from llama_index.core import Document\n","from typing import List\n","\n","def load_pdf_with_pymupdf(pdf_path: str) -> List[Document]:\n","    \"\"\"Load a PDF and convert it to LlamaIndex Document format using PyMuPDF.\"\"\"\n","    # Open the PDF\n","    doc = fitz.open(pdf_path)\n","\n","    # Extract text from each page\n","    documents = []\n","\n","    for i, page in enumerate(doc):\n","        text = page.get_text()\n","\n","        # Skip empty pages\n","        if not text.strip():\n","            continue\n","\n","        # Create Document object with metadata\n","        documents.append(\n","            Document(\n","                text=text,\n","                metadata={\n","                    \"file_name\": os.path.basename(pdf_path),\n","                    \"page_number\": i + 1,\n","                    \"total_pages\": len(doc)\n","                }\n","            )\n","        )\n","\n","    # Close the document\n","    doc.close()\n","\n","    # Print stats\n","    print(f\"Processed {pdf_path}:\")\n","    print(f\"Extracted {len(documents)} pages with content\")\n","\n","    return documents\n","\n"],"metadata":{"id":"PXGChuvZs1_T","executionInfo":{"status":"ok","timestamp":1751351110762,"user_tz":-480,"elapsed":2,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Example usage:\n","pdf_docs = load_pdf_with_pymupdf(pdf_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5sZ8U0yXs5N6","executionInfo":{"status":"ok","timestamp":1751351110793,"user_tz":-480,"elapsed":29,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"410c0e4e-2611-40c1-84df-6c7e82f496f0"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Processed sample_docs/sample_contract (1).pdf:\n","Extracted 2 pages with content\n"]}]},{"cell_type":"markdown","source":["## Section 2: Indexing and Processing PDFs\n","\n","Let's create the indexing infrastructure first:"],"metadata":{"id":"mliICfl5fXHP"}},{"cell_type":"code","source":["from llama_index.llms.gemini import Gemini\n","from llama_index.core import Settings\n","from llama_index.core import VectorStoreIndex\n","from llama_index.embeddings.huggingface import HuggingFaceEmbedding\n","\n","# Initialize Gemini LLM\n","llm = Gemini(model=\"models/gemini-1.5-flash\")\n","Settings.llm = llm\n","\n","# Initialize embedding model\n","embed_model = HuggingFaceEmbedding(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\n","Settings.embed_model = embed_model\n","\n","def process_and_index_pdf(pdf_path):\n","    \"\"\"Process a PDF and create both vector and keyword indices.\"\"\"\n","    # Load documents\n","    documents = load_pdf_with_pymupdf(pdf_path)\n","\n","    # Create vector index\n","    vector_index = VectorStoreIndex.from_documents(documents)\n","\n","    print(f\"Indexed {len(documents)} document chunks\")\n","\n","    return vector_index\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"id":"gN0dX_eQfZpT","executionInfo":{"status":"ok","timestamp":1751351144974,"user_tz":-480,"elapsed":34178,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"329d03a4-8e3d-410c-fd1d-6daa35affe53"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-11-4070388219.py:7: DeprecationWarning: Call to deprecated class Gemini. (Should use `llama-index-llms-google-genai` instead, using Google's latest unified SDK. See: https://docs.llamaindex.ai/en/stable/examples/llm/google_genai/)\n","  llm = Gemini(model=\"models/gemini-1.5-flash\")\n","/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Step 2: Index the PDF\n","index = process_and_index_pdf(pdf_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yNjxTfPtfcgK","executionInfo":{"status":"ok","timestamp":1751351145797,"user_tz":-480,"elapsed":811,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"0133a6b2-2ece-4df7-d52c-4c25877482df"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Processed sample_docs/sample_contract (1).pdf:\n","Extracted 2 pages with content\n","Indexed 2 document chunks\n"]}]},{"cell_type":"markdown","source":["## Section 2: Implement Query Expansion & Rewriting\n","\n","Query expansion helps improve retrieval by adding relevant terms to the original query."],"metadata":{"id":"SDS2xrk5tGvC"}},{"cell_type":"code","source":["from llama_index.llms.gemini import Gemini\n","from llama_index.core import Settings\n","\n","# Initialize Gemini LLM\n","llm = Gemini(model=\"models/gemini-1.5-flash\")\n","Settings.llm = llm\n","\n","# Simple query expansion function using Gemini\n","def expand_query(query: str, num_expansions: int = 3) -> list:\n","    \"\"\"Expand a query to include related terms using Gemini.\"\"\"\n","    prompt = f\"\"\"\n","    I need to search a legal contract with this query: \"{query}\"\n","\n","    Please help me expand this query by generating {num_expansions} alternative versions that:\n","    1. Use different but related terminology\n","    2. Include relevant legal terms that might appear in a contract\n","    3. Cover similar concepts but phrased differently\n","\n","    Format your response as a list of alternative queries only, with no additional text.\n","    \"\"\"\n","\n","    response = llm.complete(prompt)\n","\n","    # Extract the expanded queries\n","    expanded_queries = [line.strip() for line in response.text.split('\\n') if line.strip()]\n","\n","    # Add the original query if needed\n","    if query not in expanded_queries:\n","        expanded_queries = [query] + expanded_queries\n","\n","    return expanded_queries"],"metadata":{"id":"zIHTTBq2tK91","colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1751351146487,"user_tz":-480,"elapsed":684,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"02ef19ba-7fc6-4536-ff22-71591aa68437"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-13-645162105.py:5: DeprecationWarning: Call to deprecated class Gemini. (Should use `llama-index-llms-google-genai` instead, using Google's latest unified SDK. See: https://docs.llamaindex.ai/en/stable/examples/llm/google_genai/)\n","  llm = Gemini(model=\"models/gemini-1.5-flash\")\n"]}]},{"cell_type":"code","source":["# Example usage:\n","expanded = expand_query(\"What are the penalties for late payments?\")\n","for i, q in enumerate(expanded):\n","    print(f\"{i+1}. {q}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":88},"id":"2M36rkoitNGC","executionInfo":{"status":"ok","timestamp":1751351147903,"user_tz":-480,"elapsed":1414,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"81e0d566-05e9-44b4-b6bf-9df6cca76df1"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["1. What are the penalties for late payments?\n","2. * What are the consequences of delayed payment?\n","3. * What remedies are available to the obligee in the event of a breach of the payment terms?\n","4. *  What are the late payment fees, charges, or interest rates stipulated in this agreement?\n"]}]},{"cell_type":"markdown","source":["### Creating a Query Expansion Engine\n","\n","Now let's implement a more structured query expansion using LlamaIndex's built-in functionality:"],"metadata":{"id":"9vnC6CNptPpm"}},{"cell_type":"code","source":["from llama_index.core.query_engine import RetrieverQueryEngine\n","from llama_index.core.retrievers import QueryFusionRetriever\n","\n","# Function to create a query engine that uses query expansion\n","def create_query_expansion_engine(index):\n","    \"\"\"Create a query engine that uses query expansion.\"\"\"\n","    # First create multiple retrievers (base retriever)\n","    base_retriever = index.as_retriever(similarity_top_k=2)\n","\n","    # Create a query fusion retriever\n","    fusion_retriever = QueryFusionRetriever(\n","        retrievers=[base_retriever],\n","        llm=llm,\n","        similarity_top_k=2,\n","        num_queries=3,  # Generate 3 queries per original query\n","        mode=\"reciprocal_rerank\"  # Use reciprocal rank fusion\n","    )\n","\n","    # Create the query engine with the fusion retriever\n","    query_engine = RetrieverQueryEngine.from_args(\n","        retriever=fusion_retriever,\n","        llm=llm,\n","        verbose=True\n","    )\n","\n","    return query_engine\n"],"metadata":{"id":"mnYfNdAQtW7z","executionInfo":{"status":"ok","timestamp":1751351147903,"user_tz":-480,"elapsed":14,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Example usage:\n","expanded_query_engine = create_query_expansion_engine(index)\n","response = expanded_query_engine.query(\"What are the penalties for late payments?\")\n","print(response)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"5J5liSBstYmy","executionInfo":{"status":"ok","timestamp":1751351150204,"user_tz":-480,"elapsed":2303,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"e8d354ba-bf4e-4306-a5b4-162d8a9b9408"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Late payments will accrue interest at a rate of 1.5% per month from the due date until the payment is complete.\n","\n"]}]},{"cell_type":"code","source":["!pip install llama-index-retrievers-bm25"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LsUb5CE0lQ9L","executionInfo":{"status":"ok","timestamp":1751351159348,"user_tz":-480,"elapsed":9144,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"e6b63f8a-ed08-4b60-e403-615c0b0249e5"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: llama-index-retrievers-bm25 in /usr/local/lib/python3.11/dist-packages (0.5.2)\n","Requirement already satisfied: bm25s<0.3.0,>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-retrievers-bm25) (0.2.13)\n","Requirement already satisfied: llama-index-core<0.13.0,>=0.12.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-retrievers-bm25) (0.12.45)\n","Requirement already satisfied: pystemmer<3.0.0.0,>=2.2.0.1 in /usr/local/lib/python3.11/dist-packages (from llama-index-retrievers-bm25) (2.2.0.3)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from bm25s<0.3.0,>=0.2.0->llama-index-retrievers-bm25) (1.15.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from bm25s<0.3.0,>=0.2.0->llama-index-retrievers-bm25) (2.0.2)\n","Requirement already satisfied: aiohttp<4,>=3.8.6 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.11.15)\n","Requirement already satisfied: aiosqlite in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.21.0)\n","Requirement already satisfied: banks<3,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2.1.3)\n","Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.6.7)\n","Requirement already satisfied: deprecated>=1.2.9.3 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.2.18)\n","Requirement already satisfied: dirtyjson<2,>=1.0.8 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.0.8)\n","Requirement already satisfied: filetype<2,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.2.0)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2025.3.2)\n","Requirement already satisfied: httpx in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.28.1)\n","Requirement already satisfied: llama-index-workflows<2,>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.0.1)\n","Requirement already satisfied: nest-asyncio<2,>=1.5.8 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.6.0)\n","Requirement already satisfied: networkx>=3.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.5)\n","Requirement already satisfied: nltk>3.8.1 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.9.1)\n","Requirement already satisfied: pillow>=9.0.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (10.4.0)\n","Requirement already satisfied: pydantic>=2.8.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2.11.7)\n","Requirement already satisfied: pyyaml>=6.0.1 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (6.0.2)\n","Requirement already satisfied: requests>=2.31.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2.32.3)\n","Requirement already satisfied: setuptools>=80.9.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (80.9.0)\n","Requirement already satisfied: sqlalchemy>=1.4.49 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy[asyncio]>=1.4.49->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2.0.41)\n","Requirement already satisfied: tenacity!=8.4.0,<10.0.0,>=8.2.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (8.5.0)\n","Requirement already satisfied: tiktoken>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.9.0)\n","Requirement already satisfied: tqdm<5,>=4.66.1 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (4.67.1)\n","Requirement already satisfied: typing-extensions>=4.5.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (4.14.0)\n","Requirement already satisfied: typing-inspect>=0.8.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.9.0)\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.11/dist-packages (from llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.17.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4,>=3.8.6->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2.6.1)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4,>=3.8.6->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.3.2)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4,>=3.8.6->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (25.3.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4,>=3.8.6->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.7.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4,>=3.8.6->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (6.4.4)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4,>=3.8.6->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.3.2)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4,>=3.8.6->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.20.1)\n","Requirement already satisfied: griffe in /usr/local/lib/python3.11/dist-packages (from banks<3,>=2.0.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.7.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from banks<3,>=2.0.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.1.6)\n","Requirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from banks<3,>=2.0.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (4.3.8)\n","Requirement already satisfied: llama-index-instrumentation>=0.1.0 in /usr/local/lib/python3.11/dist-packages (from llama-index-workflows<2,>=1.0.1->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.2.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk>3.8.1->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (8.2.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk>3.8.1->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.5.1)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk>3.8.1->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2024.11.6)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2.8.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2.8.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2.33.2)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2.8.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.4.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (2025.6.15)\n","Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy>=1.4.49->sqlalchemy[asyncio]>=1.4.49->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.2.3)\n","Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from typing-inspect>=0.8.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.1.0)\n","Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.26.1)\n","Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (4.9.0)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.0.9)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.16.0)\n","Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.11/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (24.2)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (1.3.1)\n","Requirement already satisfied: colorama>=0.4 in /usr/local/lib/python3.11/dist-packages (from griffe->banks<3,>=2.0.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (0.4.6)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->banks<3,>=2.0.0->llama-index-core<0.13.0,>=0.12.0->llama-index-retrievers-bm25) (3.0.2)\n"]}]},{"cell_type":"markdown","source":["## Section 3: Implement Hybrid Retrieval (Keyword + Vector Search)\n","\n","Hybrid retrieval combines embedding-based semantic search with keyword-based retrieval for better results."],"metadata":{"id":"GAyqsFqftai7"}},{"cell_type":"code","source":["from llama_index.core import VectorStoreIndex\n","from llama_index.retrievers.bm25 import BM25Retriever\n","\n","def create_hybrid_retriever(index, query, top_k=2):\n","    \"\"\"Create a hybrid retrieval approach combining vector and keyword search.\"\"\"\n","    # Method 1: Vector retrieval (semantic search)\n","    vector_retriever = index.as_retriever(similarity_top_k=top_k)\n","    vector_nodes = vector_retriever.retrieve(query)\n","\n","    # Method 2: BM25 retrieval (keyword-based search)\n","    # Get all nodes from the index\n","    nodes = [node for node in index.docstore.docs.values()]\n","    bm25_retriever = BM25Retriever.from_defaults(\n","        nodes=nodes,\n","        similarity_top_k=top_k\n","    )\n","    keyword_nodes = bm25_retriever.retrieve(query)\n","\n","    # Combine results (simple approach)\n","    all_nodes = []\n","    all_nodes.extend(vector_nodes)\n","    all_nodes.extend(keyword_nodes)\n","\n","    # Remove duplicates\n","    unique_nodes = []\n","    seen_ids = set()\n","    for node in all_nodes:\n","        if node.node_id not in seen_ids:\n","            unique_nodes.append(node)\n","            seen_ids.add(node.node_id)\n","\n","    # Sort by score (higher is better)\n","    sorted_nodes = sorted(unique_nodes, key=lambda x: x.score if hasattr(x, 'score') else 0.0, reverse=True)\n","\n","    # Limit to top results\n","    top_nodes = sorted_nodes[:top_k]\n","\n","    return top_nodes"],"metadata":{"id":"PRWmuigdtc0C","executionInfo":{"status":"ok","timestamp":1751351160265,"user_tz":-480,"elapsed":907,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# Example usage:\n","hybrid_nodes = create_hybrid_retriever(index, \"What is the refund policy?\")\n","for i, node in enumerate(hybrid_nodes):\n","    print(f\"Result {i+1} (Score: {node.score:.4f}):\")\n","    print(node.get_text())\n","    print(\"-\" * 40)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fP_ezN90teU7","executionInfo":{"status":"ok","timestamp":1751351160475,"user_tz":-480,"elapsed":189,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"2c4c4931-cbb8-4415-b6c8-c0950422244b"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["DEBUG:bm25s:Building index from IDs objects\n"]},{"output_type":"stream","name":"stdout","text":["Result 1 (Score: 0.3767):\n","4.3 No refunds will be issued for completed projects that meet the specifications outlined in Exhibit A.\n","5. CONFIDENTIALITY\n","5.1 Each party acknowledges that it may receive confidential information from the other party during the\n","performance of this Agreement.\n","5.2 Each party agrees to maintain the confidentiality of such information and not to disclose it to any\n","third party without prior written consent.\n","----------------------------------------\n","Result 2 (Score: 0.2147):\n","SERVICE AGREEMENT CONTRACT\n","This Service Agreement (the \"Agreement\") is entered into as of January 15, 2025 (the \"Effective Date\")\n","by and between:\n","ABC Company Inc., with its principal place of business at 123 Business Avenue, Corporate City, State\n","12345 (\"Service Provider\"); and\n","XYZ Corporation, with its principal place of business at 456 Commerce Street, Enterprise Town, State\n","67890 (\"Client\").\n","1. SERVICES\n","1.1 Service Provider agrees to provide Client with consulting services (\"Services\") as described in\n","Exhibit A attached hereto.\n","1.2 Service Provider shall use reasonable efforts to perform the Services in accordance with generally\n","accepted industry standards and practices.\n","2. PAYMENT\n","2.1 Client agrees to pay Service Provider for the Services at the rates specified in Exhibit B attached\n","hereto.\n","2.2 Service Provider shall invoice Client on a monthly basis for Services performed. Payment terms are\n","net 30 days from receipt of invoice.\n","2.3 Late payments shall bear interest at the rate of 1.5% per month from the due date until paid in full.\n","3. TERM AND TERMINATION\n","3.1 This Agreement shall commence on the Effective Date and shall continue for a period of one (1)\n","year, unless earlier terminated as provided herein.\n","3.2 Either party may terminate this Agreement upon thirty (30) days written notice to the other party.\n","4. REFUND POLICY\n","4.1 If Client is dissatisfied with the Services, Client may request a refund within 14 days of service\n","delivery.\n","4.2 Refunds are issued at the sole discretion of Service Provider and will be processed within 30 days\n","of approval.\n","----------------------------------------\n"]}]},{"cell_type":"markdown","source":["### Comparing Retrieval Methods\n","\n","Let's create a function to compare different retrieval methods:"],"metadata":{"id":"R5ZtZ2BOtg5F"}},{"cell_type":"code","source":["def compare_retrieval_methods(index, query, top_k=2):\n","    \"\"\"Compare different retrieval methods for the same query.\"\"\"\n","    # Vector retrieval\n","    vector_retriever = index.as_retriever(similarity_top_k=top_k)\n","    vector_nodes = vector_retriever.retrieve(query)\n","\n","    # Keyword retrieval (BM25)\n","    nodes = [node for node in index.docstore.docs.values()]\n","    keyword_retriever = BM25Retriever.from_defaults(\n","        nodes=nodes,\n","        similarity_top_k=top_k\n","    )\n","    keyword_nodes = keyword_retriever.retrieve(query)\n","\n","    # Hybrid retrieval\n","    hybrid_nodes = create_hybrid_retriever(index, query, top_k)\n","\n","    # Create a comparison dataframe\n","    results = []\n","\n","    for method, nodes in [\n","        (\"Vector (Semantic)\", vector_nodes),\n","        (\"Keyword (BM25)\", keyword_nodes),\n","        (\"Hybrid\", hybrid_nodes)\n","    ]:\n","        for i, node in enumerate(nodes):\n","            results.append({\n","                \"Method\": method,\n","                \"Rank\": i + 1,\n","                \"Score\": node.score if hasattr(node, 'score') else 0.0,\n","                \"Content\": node.get_text()[:200] + \"...\",  # First 200 chars\n","                \"Page\": node.metadata.get(\"page_number\", \"Unknown\") if hasattr(node, 'metadata') else \"Unknown\"\n","            })\n","\n","    results_df = pd.DataFrame(results)\n","    display(results_df)\n","\n","    # Visualize scores\n","    plt.figure(figsize=(10, 6))\n","    for method in [\"Vector (Semantic)\", \"Keyword (BM25)\", \"Hybrid\"]:\n","        method_df = results_df[results_df[\"Method\"] == method]\n","        plt.bar(\n","            [f\"{method} - Rank {row['Rank']}\" for _, row in method_df.iterrows()],\n","            method_df[\"Score\"],\n","            alpha=0.7,\n","            label=method\n","        )\n","\n","    plt.xlabel(\"Result\")\n","    plt.ylabel(\"Retrieval Score\")\n","    plt.title(f\"Comparison of Retrieval Methods for Query: '{query}'\")\n","    plt.xticks(rotation=45)\n","    plt.legend()\n","    plt.tight_layout()\n","    plt.show()\n","\n","    return results_df"],"metadata":{"id":"UmLRj_pCti8z","executionInfo":{"status":"ok","timestamp":1751351160478,"user_tz":-480,"elapsed":1,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Example usage:\n","comparison = compare_retrieval_methods(index, \"What is the refund policy?\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":863},"id":"bb-UpXeRtkcl","executionInfo":{"status":"ok","timestamp":1751351161313,"user_tz":-480,"elapsed":834,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"beceadc2-d295-43f3-9cbc-1f81388354c5"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["DEBUG:bm25s:Building index from IDs objects\n","DEBUG:bm25s:Building index from IDs objects\n"]},{"output_type":"display_data","data":{"text/plain":["              Method  Rank     Score  \\\n","0  Vector (Semantic)     1  0.376707   \n","1  Vector (Semantic)     2  0.214658   \n","2     Keyword (BM25)     1  0.322329   \n","3     Keyword (BM25)     2  0.100949   \n","4             Hybrid     1  0.376707   \n","5             Hybrid     2  0.214658   \n","\n","                                             Content  Page  \n","0  4.3 No refunds will be issued for completed pr...     2  \n","1  SERVICE AGREEMENT CONTRACT\\nThis Service Agree...     1  \n","2  SERVICE AGREEMENT CONTRACT\\nThis Service Agree...     1  \n","3  4.3 No refunds will be issued for completed pr...     2  \n","4  4.3 No refunds will be issued for completed pr...     2  \n","5  SERVICE AGREEMENT CONTRACT\\nThis Service Agree...     1  "],"text/html":["\n","  <div id=\"df-00398304-395d-4f26-aabc-e8a32da83ca6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Method</th>\n","      <th>Rank</th>\n","      <th>Score</th>\n","      <th>Content</th>\n","      <th>Page</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Vector (Semantic)</td>\n","      <td>1</td>\n","      <td>0.376707</td>\n","      <td>4.3 No refunds will be issued for completed pr...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Vector (Semantic)</td>\n","      <td>2</td>\n","      <td>0.214658</td>\n","      <td>SERVICE AGREEMENT CONTRACT\\nThis Service Agree...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Keyword (BM25)</td>\n","      <td>1</td>\n","      <td>0.322329</td>\n","      <td>SERVICE AGREEMENT CONTRACT\\nThis Service Agree...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Keyword (BM25)</td>\n","      <td>2</td>\n","      <td>0.100949</td>\n","      <td>4.3 No refunds will be issued for completed pr...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Hybrid</td>\n","      <td>1</td>\n","      <td>0.376707</td>\n","      <td>4.3 No refunds will be issued for completed pr...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Hybrid</td>\n","      <td>2</td>\n","      <td>0.214658</td>\n","      <td>SERVICE AGREEMENT CONTRACT\\nThis Service Agree...</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00398304-395d-4f26-aabc-e8a32da83ca6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-00398304-395d-4f26-aabc-e8a32da83ca6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-00398304-395d-4f26-aabc-e8a32da83ca6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-7edeebee-6c36-4e06-9ab1-579c9d998d99\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7edeebee-6c36-4e06-9ab1-579c9d998d99')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-7edeebee-6c36-4e06-9ab1-579c9d998d99 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"comparison = compare_retrieval_methods(index, \\\"What is the refund policy?\\\")\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Vector (Semantic)\",\n          \"Keyword (BM25)\",\n          \"Hybrid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10971065764628293,\n        \"min\": 0.10094906389713287,\n        \"max\": 0.37670677001767233,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.21465759957510414,\n          0.10094906389713287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Content\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"SERVICE AGREEMENT CONTRACT\\nThis Service Agreement (the \\\"Agreement\\\") is entered into as of January 15, 2025 (the \\\"Effective Date\\\")\\nby and between:\\nABC Company Inc., with its principal place of business...\",\n          \"4.3 No refunds will be issued for completed projects that meet the specifications outlined in Exhibit A.\\n5. CONFIDENTIALITY\\n5.1 Each party acknowledges that it may receive confidential information fro...\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Page\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Section 4: Implement Reranking for More Accurate Results\n","\n","Reranking helps prioritize the most relevant results after initial retrieval."],"metadata":{"id":"u3yHD5Nctjgo"}},{"cell_type":"code","source":["from llama_index.core.postprocessor import SentenceTransformerRerank\n","from llama_index.core.schema import NodeWithScore\n","\n","# Create a reranker\n","def rerank_results(nodes, query, top_n=2):\n","    \"\"\"Rerank retrieved nodes using the Sentence Transformer reranker.\"\"\"\n","    # Create the reranker\n","    reranker = SentenceTransformerRerank(\n","        model=\"cross-encoder/ms-marco-MiniLM-L-6-v2\",\n","        top_n=top_n\n","    )\n","\n","    # Rerank the nodes\n","    reranked_nodes = reranker.postprocess_nodes(\n","        nodes,\n","        query_str=query\n","    )\n","\n","    return reranked_nodes\n","\n","# Function to demonstrate the reranking process\n","def demonstrate_reranking(index, query, top_k=4):\n","    \"\"\"Demonstrate the reranking process on retrieval results.\"\"\"\n","    # First retrieve more nodes than we need\n","    retriever = index.as_retriever(similarity_top_k=top_k)\n","    nodes = retriever.retrieve(query)\n","\n","    print(f\"Query: {query}\")\n","    print(\"\\nOriginal Retrieval Order:\")\n","    for i, node in enumerate(nodes):\n","        print(f\"{i+1}. (Score: {node.score:.4f}) - {node.get_text()[:100]}...\")\n","\n","    # Now rerank them\n","    reranked_nodes = rerank_results(nodes, query, top_n=2)\n","\n","    print(\"\\nAfter Reranking:\")\n","    for i, node in enumerate(reranked_nodes):\n","        print(f\"{i+1}. (Score: {node.score:.4f}) - {node.get_text()[:100]}...\")\n","\n","    # Create comparison dataframe\n","    results = []\n","\n","    # Original ranking\n","    for i, node in enumerate(nodes):\n","        results.append({\n","            \"Stage\": \"Original Retrieval\",\n","            \"Rank\": i + 1,\n","            \"Score\": node.score,\n","            \"Content\": node.get_text()[:150] + \"...\",\n","            \"Page\": node.metadata.get(\"page_number\", \"Unknown\")\n","        })\n","\n","    # Reranked\n","    for i, node in enumerate(reranked_nodes):\n","        results.append({\n","            \"Stage\": \"After Reranking\",\n","            \"Rank\": i + 1,\n","            \"Score\": node.score,\n","            \"Content\": node.get_text()[:150] + \"...\",\n","            \"Page\": node.metadata.get(\"page_number\", \"Unknown\")\n","        })\n","\n","    results_df = pd.DataFrame(results)\n","    display(results_df)\n","\n","    return results_df\n","\n","# Example usage:\n","reranking_demo = demonstrate_reranking(index, \"What happens if I cancel the service?\", top_k=4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":563,"referenced_widgets":["ee741be771d54bcb80365f71d55273c4","b416468d1f164154ba652f801d573c2f","feb46929592c44e5b7470802605173bb","712d30bd4c5f42c68fd9626b927f1ccc","1bcd345d5d214355bef19cb94ea6a4b1","e0305e3c2b40445f8d4b3115a936da65","af54606a26e047eab365d23111bd07f5","a27b6bf5f6a64507aa49cb6334696e9f","78d6e3a3e4944991a3e90529cbdb59a0","fe97848e0bb74da1894e0b023277119b","d869573faaac4199b2b3b804a811ad65","172b548d81604a50b5e93a6eb62965e6","bcc55651058a4f47986eb74c5ae37be9","c836dbe59e9448a89a7c529767e5150c","68c0bf118f7a435db09e47692b586db6","7aec078717424af9b48f8a02db50b025","d364af555ae54adc9327222cc6c24232","76dd718c453d42baa6a44ac02d0d08ee","f7625f4b530b4c7da6ef3b8aaf353fe6","1dea58cd55c44ab5921c4c3fa51d3e3c","8b6ac091d6af44829471c96dadf12856","a335637e3e144b44b3ed5f7a92ae8071","f5a89e45d1564e178047b5f816aeb6ff","269623d166a648d5af8542274e9d3b4a","b528a1e9a63f42b2b64868b5461d2502","a675beebffdd4ac48307cda4808ab040","486405c62f0f41e3867fd6fd94793bc8","efa7790f9b1241b8abc0538a2a2a83f2","d71121bbae874180a6cc6b040e3d3a5e","8d75de0dbb654d55b6650a534dce7f15","a42c8fa12e764d87aac73a13d3ae4db5","d2277df3b1f440119d90eb16e2247da1","cd4cf14bfc7646d4b58a6a00dd64cb3a","bb0974334c7d4bd3a09436ecb363fe9c","6e6a85f794bf45ff9ed966452d7e1649","9b112813f608473e939bc9f4cf88d071","11ea73676da2437f836d8d96c7312592","934acbb0c7634a48822aed1f9b26415d","92d1254804354941899ef6989779d587","b46c7563dabd4509bf5e37203da84646","872b53ee1e57457ca71f3e485d3a4532","23f332cec2fd4dc4993efde311faf73d","6dc84dfc0d7146e497e402e958e0ae5f","1407cbaf85054a52b8a47190e86cad81","a7db555011da4de78af8d6bc1cf8b92f","e5ce4dffa3e44e549a814145fb694b3f","626821ea08e841268badb1a27ab32594","5150b6a8b3034d8c889d4ea744906806","fe216d2a00d84dac83cffe28e69bcf13","a57f3f9136d84b0a85d366c6ba404b69","5011e9536697488cbd7ca2e0fe69807a","71ead79971df4ca689f7cf340f73bdcc","9f75cfecef6742d8b60b79e2aa688953","1a6419d9faa340e8a8fc86f402337b97","95e3165d2d97404ba891c2d494dcbba4","b69d6b5ce7154fe3a89045ba6682987b","cf0bf83d5f4b4ce79a35fc0072bdb09c","a57b7aa13a974cdb9a2fce39bf8ccaba","4463f210fa024345b41ee864a69a2fc4","c5ba9c27ceff4864945df62b63713188","a9634d6833da4e3ab06d105617d9cb0a","175df882221246f9874c79411563ed1c","be0c75c180b84b20b57cb9fe7b808289","9e662ffb41da4eda89c1297b22dbb482","3ae762aca74a4cd88c2fef873d38eb2c","c14cde72c2454941aecb276635129a83"]},"id":"FwFGbb3fvqab","executionInfo":{"status":"ok","timestamp":1751351164839,"user_tz":-480,"elapsed":3525,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"818031e8-8cc3-40b4-8bc5-4ab0841106de"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Query: What happens if I cancel the service?\n","\n","Original Retrieval Order:\n","1. (Score: 0.2581) - SERVICE AGREEMENT CONTRACT\n","This Service Agreement (the \"Agreement\") is entered into as of January 15...\n","2. (Score: 0.1393) - 4.3 No refunds will be issued for completed projects that meet the specifications outlined in Exhibi...\n"]},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ee741be771d54bcb80365f71d55273c4"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer_config.json: 0.00B [00:00, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"172b548d81604a50b5e93a6eb62965e6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["vocab.txt: 0.00B [00:00, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f5a89e45d1564e178047b5f816aeb6ff"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer.json: 0.00B [00:00, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bb0974334c7d4bd3a09436ecb363fe9c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["special_tokens_map.json:   0%|          | 0.00/132 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a7db555011da4de78af8d6bc1cf8b92f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["README.md: 0.00B [00:00, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b69d6b5ce7154fe3a89045ba6682987b"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","After Reranking:\n","1. (Score: -8.3232) - SERVICE AGREEMENT CONTRACT\n","This Service Agreement (the \"Agreement\") is entered into as of January 15...\n","2. (Score: -11.1325) - 4.3 No refunds will be issued for completed projects that meet the specifications outlined in Exhibi...\n"]},{"output_type":"display_data","data":{"text/plain":["                Stage  Rank      Score  \\\n","0  Original Retrieval     1  -8.323151   \n","1  Original Retrieval     2 -11.132524   \n","2     After Reranking     1  -8.323151   \n","3     After Reranking     2 -11.132524   \n","\n","                                             Content  Page  \n","0  SERVICE AGREEMENT CONTRACT\\nThis Service Agree...     1  \n","1  4.3 No refunds will be issued for completed pr...     2  \n","2  SERVICE AGREEMENT CONTRACT\\nThis Service Agree...     1  \n","3  4.3 No refunds will be issued for completed pr...     2  "],"text/html":["\n","  <div id=\"df-66396478-b4f5-4a7d-8dff-8ec2c306b343\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Stage</th>\n","      <th>Rank</th>\n","      <th>Score</th>\n","      <th>Content</th>\n","      <th>Page</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Original Retrieval</td>\n","      <td>1</td>\n","      <td>-8.323151</td>\n","      <td>SERVICE AGREEMENT CONTRACT\\nThis Service Agree...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Original Retrieval</td>\n","      <td>2</td>\n","      <td>-11.132524</td>\n","      <td>4.3 No refunds will be issued for completed pr...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>After Reranking</td>\n","      <td>1</td>\n","      <td>-8.323151</td>\n","      <td>SERVICE AGREEMENT CONTRACT\\nThis Service Agree...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>After Reranking</td>\n","      <td>2</td>\n","      <td>-11.132524</td>\n","      <td>4.3 No refunds will be issued for completed pr...</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66396478-b4f5-4a7d-8dff-8ec2c306b343')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-66396478-b4f5-4a7d-8dff-8ec2c306b343 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-66396478-b4f5-4a7d-8dff-8ec2c306b343');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-d0ff12b3-6e43-45d3-a852-66db252bdf8f\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0ff12b3-6e43-45d3-a852-66db252bdf8f')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-d0ff12b3-6e43-45d3-a852-66db252bdf8f button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"reranking_demo = demonstrate_reranking(index, \\\"What happens if I cancel the service?\\\", top_k=4)\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Stage\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"After Reranking\",\n          \"Original Retrieval\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Score\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -11.132523536682129,\n          -8.323150634765625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Content\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"4.3 No refunds will be issued for completed projects that meet the specifications outlined in Exhibit A.\\n5. CONFIDENTIALITY\\n5.1 Each party acknowledge...\",\n          \"SERVICE AGREEMENT CONTRACT\\nThis Service Agreement (the \\\"Agreement\\\") is entered into as of January 15, 2025 (the \\\"Effective Date\\\")\\nby and between:\\nABC ...\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Page\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["## Complete End-to-End Example - Building an Advanced RAG Pipeline\n","\n","Now let's combine all these techniques into an advanced RAG pipeline:"],"metadata":{"id":"Y3h7ih1ovvhi"}},{"cell_type":"code","source":["from llama_index.core.query_engine import RetrieverQueryEngine\n","from llama_index.core.postprocessor import SentenceTransformerRerank\n","from llama_index.retrievers.bm25 import BM25Retriever\n","from llama_index.core.retrievers import BaseRetriever\n","from llama_index.core.schema import NodeWithScore, QueryBundle\n","\n","def build_rag_pipeline(index):\n","    \"\"\"Build a simple but effective RAG pipeline with hybrid retrieval and reranking.\"\"\"\n","\n","    # Get all nodes from the index's docstore\n","    nodes = list(index.docstore.docs.values())\n","\n","    # Determine safe top_k value (number of nodes to retrieve)\n","    # Must be at least 1 and no more than the number of available nodes\n","    num_nodes = len(nodes)\n","    safe_top_k = min(2, max(1, num_nodes))\n","\n","    print(f\"Index contains {num_nodes} nodes, using top_k={safe_top_k}\")\n","\n","    # Step 1: Create a hybrid retriever combining vector and keyword search\n","    # First, get the vector retriever (for semantic understanding)\n","    vector_retriever = index.as_retriever(\n","        similarity_top_k=safe_top_k  # Retrieve top 3 most similar chunks\n","    )\n","\n","    # Next, create a BM25 retriever (for keyword matching)\n","    # Get all nodes from the index's docstore\n","    nodes = list(index.docstore.docs.values())\n","    bm25_retriever = BM25Retriever.from_defaults(\n","        nodes=nodes,\n","        similarity_top_k=safe_top_k  # Retrieve top 3 most similar chunks\n","    )\n","\n","    # Create a proper hybrid retriever class\n","    class HybridRetriever(BaseRetriever):\n","        \"\"\"Hybrid retriever that combines vector and keyword search results.\"\"\"\n","\n","        def __init__(self, vector_retriever, keyword_retriever, top_k=2):\n","            \"\"\"Initialize with vector and keyword retrievers.\"\"\"\n","            self.vector_retriever = vector_retriever\n","            self.keyword_retriever = keyword_retriever\n","            self.top_k = top_k\n","            super().__init__()\n","\n","        def _retrieve(self, query_bundle, **kwargs):\n","            \"\"\"Retrieve from both retrievers and combine results.\"\"\"\n","            # Get results from both retrievers\n","            vector_nodes = self.vector_retriever.retrieve(query_bundle)\n","            keyword_nodes = self.keyword_retriever.retrieve(query_bundle)\n","\n","            # Combine all nodes\n","            all_nodes = list(vector_nodes) + list(keyword_nodes)\n","\n","            # Remove duplicates (by node_id)\n","            unique_nodes = {}\n","            for node in all_nodes:\n","                if node.node_id not in unique_nodes:\n","                    unique_nodes[node.node_id] = node\n","\n","            # Sort by score (higher is better)\n","            sorted_nodes = sorted(\n","                unique_nodes.values(),\n","                key=lambda x: x.score if hasattr(x, 'score') else 0.0,\n","                reverse=True\n","            )\n","\n","            return sorted_nodes[:self.top_k]  # Return top results\n","\n","    # Create our hybrid retriever instance\n","    hybrid_retriever = HybridRetriever(\n","        vector_retriever=vector_retriever,\n","        keyword_retriever=bm25_retriever,\n","        top_k=safe_top_k\n","    )\n","\n","    # Step 2: Create a reranker to prioritize the most relevant chunks\n","    if num_nodes > 1:\n","        reranker = SentenceTransformerRerank(\n","            model=\"cross-encoder/ms-marco-MiniLM-L-6-v2\",\n","            top_n=min(2, num_nodes)  # Keep only top results after reranking\n","        )\n","        node_postprocessors = [reranker]\n","    else:\n","        node_postprocessors = []\n","\n","\n","    # Step 3: Build the query engine\n","    query_engine = RetrieverQueryEngine.from_args(\n","        retriever=hybrid_retriever,\n","        llm=llm,\n","        node_postprocessors=[reranker]\n","    )\n","\n","    return query_engine"],"metadata":{"id":"CTZ-oaTuvtMY","executionInfo":{"status":"ok","timestamp":1751351164842,"user_tz":-480,"elapsed":52,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Example usage:\n","#pdf_path = upload_pdf()\n","index = process_and_index_pdf(pdf_path)\n","rag_engine = build_rag_pipeline(index)\n","response = rag_engine.query(\"What are the penalties for late payments?\")\n","print('\\nFinal Response:\\n ---------------------- \\n')\n","print(response)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":213},"id":"XQ0heyFFl0TJ","executionInfo":{"status":"ok","timestamp":1751351169142,"user_tz":-480,"elapsed":4298,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"35a5a770-5acd-4369-af1d-7e8a355db4e2"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Processed sample_docs/sample_contract (1).pdf:\n","Extracted 2 pages with content\n"]},{"output_type":"stream","name":"stderr","text":["DEBUG:bm25s:Building index from IDs objects\n"]},{"output_type":"stream","name":"stdout","text":["Indexed 2 document chunks\n","Index contains 2 nodes, using top_k=2\n","\n","Final Response:\n"," ---------------------- \n","\n","Late payments will accrue interest at a rate of 1.5% per month from the due date until the payment is complete.\n","\n"]}]},{"cell_type":"markdown","source":["### Why This Approach Works Well\n","\n","1. **Hybrid Retrieval**: By combining vector search (semantic understanding) with BM25 (keyword matching), we get the best of both worlds:\n","   - Vector search finds semantically related content even if keywords don't match\n","   - BM25 ensures we don't miss exact term matches that might be relevant\n","\n","2. **Reranking**: The SentenceTransformer reranker provides a second opinion on relevance:\n","   - It uses a specialized cross-encoder model to score query-chunk pairs\n","   - This helps filter out chunks that might be tangentially related but not directly relevant\n","   - Results in higher precision answers with less noise\n","\n","3. **Simplicity**: This approach avoids complex routing logic while still delivering high-quality results:\n","   - No need for multiple specialized retrievers with complex selection logic\n","   - Handles most query types well without additional complexity\n","   - Easier to maintain and understand\n","\n","This pipeline will retrieve relevant information from PDFs and generate concise, accurate responses using Gemini's capabilities."],"metadata":{"id":"ALjA4TRfoG9Q"}},{"cell_type":"markdown","source":["## Conclusion\n","\n","In this notebook, we explored advanced PDF retrieval techniques with LlamaIndex:\n","\n","1. Loading and processing PDFs using PyMuPDF\n","2. Implementing query expansion to improve retrieval quality\n","3. Using hybrid retrieval to combine semantic and keyword search\n","4. Applying reranking to prioritize the most relevant results\n","5. Building an advanced RAG pipeline that combines all these techniques\n","\n","These techniques can significantly improve the quality of information retrieval from PDFs and other document types in real-world applications."],"metadata":{"id":"gsDrS0L2v1aS"}}]}