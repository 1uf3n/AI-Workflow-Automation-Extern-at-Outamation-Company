{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1azoBHLqH1kc4_vpJTqOv_pieN30yupa8","timestamp":1751347008998}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Embeddings and Chunking with LlamaIndex and Gemini"],"metadata":{"id":"EzawuhgMD1Im"}},{"cell_type":"markdown","source":["In this notebook, we explore different chunking techniques and embedding models in LlamaIndex while using Google's Gemini for our language model. We'll learn how different chunking strategies affect retrieval performance and how to use various embedding models."],"metadata":{"id":"A5dM6V9LEUPj"}},{"cell_type":"markdown","source":["## Setup and Installation\n","\n","First, let's install the necessary packages:"],"metadata":{"id":"yaL_CpFPEVI1"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"rOTcOKW9AdCl","executionInfo":{"status":"ok","timestamp":1751348699451,"user_tz":-480,"elapsed":54683,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"outputs":[],"source":["!pip install -q llama-index\n","!pip install -q llama-index-embeddings-huggingface\n","!pip install -q llama-index-llms-gemini\n","!pip install -q llama-index-embeddings-openai\n","!pip install -q llama-index-vector-stores-chroma\n","!pip install -q sentence-transformers\n","!pip install -q chromadb"]},{"cell_type":"markdown","source":["Now let's set up our environment:"],"metadata":{"id":"UHPWKQmNEaH3"}},{"cell_type":"code","source":["import os\n","import time\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from IPython.display import display, Markdown"],"metadata":{"id":"ZhSjBGjnEc1O","executionInfo":{"status":"ok","timestamp":1751348700067,"user_tz":-480,"elapsed":613,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# For Gemini API, set your API key\n","GOOGLE_API_KEY = \"AIzaSyCWNe4w1pBmuwZ7tAAu1ywpl71Wl7KcCEs\"  # Replace with your actual API key\n","os.environ[\"GOOGLE_API_KEY\"] = GOOGLE_API_KEY"],"metadata":{"id":"5WAaGNgYEfF7","executionInfo":{"status":"ok","timestamp":1751348700069,"user_tz":-480,"elapsed":1,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["## 1. Loading Sample Documents\n","\n","We'll create a small sample of documents to work with. First, let's create a directory and some sample files:"],"metadata":{"id":"BjrFa1HREt4E"}},{"cell_type":"code","source":["!mkdir -p sample_docs"],"metadata":{"id":"to8EqK_IE0PH","executionInfo":{"status":"ok","timestamp":1751348700167,"user_tz":-480,"elapsed":97,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Let's create some example documents\n","with open(\"sample_docs/ai_history.txt\", \"w\") as f:\n","    f.write(\"\"\"Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods and rule-based systems.\n","In the 1980s, expert systems became popular but faced limitations.\n","The 1990s and early 2000s saw a shift towards machine learning approaches.\n","The deep learning revolution began around 2012 with breakthrough results in computer vision.\n","Today, large language models like GPT, LLaMA, and Gemini represent cutting-edge AI capabilities.\n","These models are trained on vast amounts of text data and can generate human-like responses.\"\"\")\n","\n","with open(\"sample_docs/neural_networks.txt\", \"w\") as f:\n","    f.write(\"\"\"Neural networks are computing systems inspired by biological neural networks.\n","The perceptron, developed by Frank Rosenblatt in 1958, was one of the earliest neural network models.\n","Modern neural networks consist of layers of interconnected nodes or \"neurons.\"\n","Each connection can transmit a signal from one neuron to another.\n","The receiving neuron processes the signal and signals downstream neurons connected to it.\n","Deep neural networks contain multiple hidden layers between input and output layers.\n","Convolutional Neural Networks (CNNs) revolutionized image processing.\n","Recurrent Neural Networks (RNNs) and transformers handle sequential data like text or time series.\"\"\")\n","\n","with open(\"sample_docs/embeddings.txt\", \"w\") as f:\n","    f.write(\"\"\"Embeddings are dense vector representations of data in a continuous vector space.\n","Word embeddings map words to vectors where similar words are positioned closer together.\n","Popular word embedding techniques include Word2Vec, GloVe, and FastText.\n","Sentence embeddings capture meaning at the sentence level rather than individual words.\n","Models like Universal Sentence Encoder and SBERT create powerful sentence embeddings.\n","Document embeddings represent entire documents as fixed-length vectors.\n","Embeddings enable semantic search by finding documents with similar meaning, not just keyword matches.\n","They also power recommendation systems, clustering, and classification tasks.\n","Recent models like OpenAI's text-embedding-ada and Cohere's embedding models offer state-of-the-art performance.\"\"\")\n","\n","with open(\"sample_docs/data_privacy.txt\", \"w\") as f:\n","    f.write(\"\"\"Data privacy refers to the proper handling, processing, storage, and usage of personal information.\n","With increasing digitalization, protecting sensitive data has become a priority for individuals and organizations.\n","Key regulations like the GDPR (General Data Protection Regulation) and CCPA (California Consumer Privacy Act) set standards for data protection.\n","Companies must obtain user consent, provide data access, and ensure transparency in how data is used.\n","Common data privacy practices include encryption, anonymization, and access control.\n","A data breach can lead to legal consequences, financial loss, and reputational damage.\"\"\")\n","\n","with open(\"sample_docs/remote_work.txt\", \"w\") as f:\n","    f.write(\"\"\"Remote work has become a norm in the post-pandemic world.\n","Tools like Zoom, Slack, and Microsoft Teams facilitate virtual collaboration.\n","Flexible schedules and reduced commutes are key benefits of remote work.\n","However, challenges include communication gaps, work-life boundaries, and employee isolation.\n","Hybrid work models are gaining popularity as companies seek a balance.\n","Successful remote work relies on strong management, trust, and clear expectations.\"\"\")\n","\n","with open(\"sample_docs/climate_ai.txt\", \"w\") as f:\n","    f.write(\"\"\"Artificial Intelligence is playing a growing role in addressing climate change.\n","AI models help in climate forecasting, emission tracking, and energy optimization.\n","Remote sensing data and machine learning improve precision agriculture.\n","Smart grids powered by AI enhance energy efficiency and demand forecasting.\n","Ethical concerns include data bias and resource usage in training large models.\n","Collaborations between scientists and technologists are key to maximizing impact responsibly.\"\"\")"],"metadata":{"id":"iFre13aVE2Rb","executionInfo":{"status":"ok","timestamp":1751348929268,"user_tz":-480,"elapsed":3,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}}},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":["Now let's load these documents using LlamaIndex:"],"metadata":{"id":"bgc4-i2EFAT-"}},{"cell_type":"code","source":["from llama_index.core import SimpleDirectoryReader\n","\n","# Load documents\n","documents = SimpleDirectoryReader(\"sample_docs\").load_data()\n","print(f\"Loaded {len(documents)} documents.\")\n","\n","# Display document contents\n","for i, doc in enumerate(documents):\n","    print(f\"\\n--- Document {i+1}: {doc.metadata['file_name']} ---\")\n","    print(doc.text[:200] + \"...\")  # Show first 200 chars"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eSg1ZxdRE_Fz","executionInfo":{"status":"ok","timestamp":1751348702177,"user_tz":-480,"elapsed":1983,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"90a46695-7b53-4eb3-e601-e20824c014ca"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Loaded 6 documents.\n","\n","--- Document 1: ai_history.txt ---\n","Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods ...\n","\n","--- Document 2: climate_ai.txt ---\n","Artificial Intelligence is playing a growing role in addressing climate change.\n","AI models help in climate forecasting, emission tracking, and energy optimization.\n","Remote sensing data and machine learn...\n","\n","--- Document 3: data_privacy.txt ---\n","Data privacy refers to the proper handling, processing, storage, and usage of personal information.\n","With increasing digitalization, protecting sensitive data has become a priority for individuals and ...\n","\n","--- Document 4: embeddings.txt ---\n","Embeddings are dense vector representations of data in a continuous vector space.\n","Word embeddings map words to vectors where similar words are positioned closer together.\n","Popular word embedding techni...\n","\n","--- Document 5: neural_networks.txt ---\n","Neural networks are computing systems inspired by biological neural networks.\n","The perceptron, developed by Frank Rosenblatt in 1958, was one of the earliest neural network models.\n","Modern neural networ...\n","\n","--- Document 6: remote_work.txt ---\n","Remote work has become a norm in the post-pandemic world.\n","Tools like Zoom, Slack, and Microsoft Teams facilitate virtual collaboration.\n","Flexible schedules and reduced commutes are key benefits of remo...\n"]}]},{"cell_type":"markdown","source":["## 2. Exploring Different Chunking Techniques\n","\n","Chunking is a critical preprocessing step for using documents with LLMs. Let's explore different chunking strategies:\n","\n"],"metadata":{"id":"bkUMumX7FE8o"}},{"cell_type":"markdown","source":["### 2.1 Fixed-Length Chunking\n","\n","The simplest approach is to divide text into chunks of a fixed size:"],"metadata":{"id":"nhhN3bzLFDKU"}},{"cell_type":"code","source":["from llama_index.core.node_parser import SentenceSplitter\n","\n","# Fixed-length chunking with no overlap\n","splitter_fixed = SentenceSplitter(chunk_size=100, chunk_overlap=0)\n","chunks_fixed = splitter_fixed.get_nodes_from_documents(documents)\n","print(f\"Total Fixed-Length Chunks Created: {len(chunks_fixed)}\")\n","\n","# Display a sample chunk\n","print(f\"\\nSample fixed-length chunk:\")\n","print(chunks_fixed[0].text)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VzVTIdGTFHDy","executionInfo":{"status":"ok","timestamp":1751348703459,"user_tz":-480,"elapsed":1281,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"07f44ce1-0384-4831-a28d-a72e14ab0a7e"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Total Fixed-Length Chunks Created: 10\n","\n","Sample fixed-length chunk:\n","Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods and rule-based systems.\n","In the 1980s, expert systems became popular but faced limitations.\n","The 1990s and early 2000s saw a shift towards machine learning approaches.\n"]}]},{"cell_type":"markdown","source":["### 2.2 Overlapping Chunks\n","\n","Adding overlap between chunks helps maintain context across chunk boundaries:"],"metadata":{"id":"ieN3mi7jFOzm"}},{"cell_type":"code","source":["# Chunking with overlap\n","splitter_overlap = SentenceSplitter(chunk_size=100, chunk_overlap=20)\n","chunks_overlap = splitter_overlap.get_nodes_from_documents(documents)\n","print(f\"Total Overlapping Chunks Created: {len(chunks_overlap)}\")\n","\n","# Display a sample chunk with its neighbor to see overlap\n","print(f\"\\nOverlap Example:\")\n","print(f\"Chunk 1: {chunks_overlap[0].text}\")\n","print(f\"Chunk 2: {chunks_overlap[1].text}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j1fIpqVDDO7C","executionInfo":{"status":"ok","timestamp":1751348703480,"user_tz":-480,"elapsed":19,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"072ebd11-fad0-4164-bf03-a14b448a4d24"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Total Overlapping Chunks Created: 10\n","\n","Overlap Example:\n","Chunk 1: Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods and rule-based systems.\n","In the 1980s, expert systems became popular but faced limitations.\n","The 1990s and early 2000s saw a shift towards machine learning approaches.\n","Chunk 2: The 1990s and early 2000s saw a shift towards machine learning approaches.\n","The deep learning revolution began around 2012 with breakthrough results in computer vision.\n","Today, large language models like GPT, LLaMA, and Gemini represent cutting-edge AI capabilities.\n","These models are trained on vast amounts of text data and can generate human-like responses.\n"]}]},{"cell_type":"markdown","source":["### 2.3 Semantic Chunking\n","\n","Semantic chunking splits text based on meaning rather than just token count:"],"metadata":{"id":"ZppvfaSnFRJh"}},{"cell_type":"code","source":["from llama_index.core.node_parser import SemanticSplitterNodeParser\n","from llama_index.embeddings.huggingface import HuggingFaceEmbedding\n","\n","# Initialize embedding model for semantic splitting\n","embed_model = HuggingFaceEmbedding(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\n","\n","# Create semantic chunker\n","semantic_splitter = SemanticSplitterNodeParser(embed_model=embed_model)\n","chunks_semantic = semantic_splitter.get_nodes_from_documents(documents)\n","print(f\"Total Semantic Chunks Created: {len(chunks_semantic)}\")\n","\n","# Display a sample semantic chunk\n","print(f\"\\nSample semantic chunk:\")\n","print(chunks_semantic[0].text)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0MbeTJJNFUlh","executionInfo":{"status":"ok","timestamp":1751348732052,"user_tz":-480,"elapsed":28570,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"f30ea310-aa9f-48eb-92db-fe4ca03bd950"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Total Semantic Chunks Created: 12\n","\n","Sample semantic chunk:\n","Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods and rule-based systems.\n","In the 1980s, expert systems became popular but faced limitations.\n","\n"]}]},{"cell_type":"markdown","source":["### 2.4 Comparison of Chunking Strategies\n","\n","Let's compare our chunking strategies:"],"metadata":{"id":"_CP6KO2vFWht"}},{"cell_type":"code","source":["chunking_comparison = pd.DataFrame({\n","    'Strategy': ['Fixed-Length', 'Overlapping', 'Semantic'],\n","    'Number of Chunks': [len(chunks_fixed), len(chunks_overlap), len(chunks_semantic)],\n","    'Average Chunk Length': [\n","        sum(len(chunk.text) for chunk in chunks_fixed) / len(chunks_fixed),\n","        sum(len(chunk.text) for chunk in chunks_overlap) / len(chunks_overlap),\n","        sum(len(chunk.text) for chunk in chunks_semantic) / len(chunks_semantic)\n","    ]\n","})\n","\n","display(chunking_comparison)\n","\n","# Visualize the comparison\n","plt.figure(figsize=(12, 5))\n","plt.subplot(1, 2, 1)\n","plt.bar(chunking_comparison['Strategy'], chunking_comparison['Number of Chunks'])\n","plt.title('Number of Chunks by Strategy')\n","plt.ylabel('Count')\n","\n","plt.subplot(1, 2, 2)\n","plt.bar(chunking_comparison['Strategy'], chunking_comparison['Average Chunk Length'])\n","plt.title('Average Chunk Length by Strategy')\n","plt.ylabel('Characters')\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":633},"id":"AmUfxFX5FYu0","executionInfo":{"status":"ok","timestamp":1751348732718,"user_tz":-480,"elapsed":650,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"4352ab24-f2fc-4021-8df7-db9be18e9eca"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["       Strategy  Number of Chunks  Average Chunk Length\n","0  Fixed-Length                10                 366.8\n","1   Overlapping                10                 400.7\n","2      Semantic                12                 306.0"],"text/html":["\n","  <div id=\"df-f55e30d4-4006-4beb-b5da-cfccfd0fc84e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Strategy</th>\n","      <th>Number of Chunks</th>\n","      <th>Average Chunk Length</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Fixed-Length</td>\n","      <td>10</td>\n","      <td>366.8</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Overlapping</td>\n","      <td>10</td>\n","      <td>400.7</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Semantic</td>\n","      <td>12</td>\n","      <td>306.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f55e30d4-4006-4beb-b5da-cfccfd0fc84e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f55e30d4-4006-4beb-b5da-cfccfd0fc84e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f55e30d4-4006-4beb-b5da-cfccfd0fc84e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6ea35dba-fc2e-4ee3-bbcd-a658a56a0936\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6ea35dba-fc2e-4ee3-bbcd-a658a56a0936')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6ea35dba-fc2e-4ee3-bbcd-a658a56a0936 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_ab71fa69-b6e4-488e-b53c-b7c5780e6982\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('chunking_comparison')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ab71fa69-b6e4-488e-b53c-b7c5780e6982 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('chunking_comparison');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"chunking_comparison","summary":"{\n  \"name\": \"chunking_comparison\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Strategy\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Fixed-Length\",\n          \"Overlapping\",\n          \"Semantic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Chunks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 10,\n        \"max\": 12,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          12,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average Chunk Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47.98253154360796,\n        \"min\": 306.0,\n        \"max\": 400.7,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          366.8,\n          400.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"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9jNnzqh79+4qUqSIfH191aNHD50/f95afjN9ywMHDlyzzeyMGjVKTk5Oev/9969bNydmzpypWrVqyd3dXX5+furUqVOmPmpG/2Hv3r1q2rSpPDw8dNddd2ns2LGZ2jty5Ijatm0rT09PBQQEWKeGuLp/d73+hPRvYnP06NEqWbKk3Nzc1Lx58xsa9Xfy5El17NhRPj4+8vf314ABA3Tx4kVreePGjXXPPfdkuW/FihUVHh6ebduHDh2SMSbLfpnFYrH2y6ZPn67HHntMktS0aVPruWa8Dhm3WC5dulS1a9eWu7u7pkyZIkmaNm2amjVrpoCAALm6uqpKlSqaNGmSzbFKly6tPXv2aM2aNda2mzRpYi0/c+aMBg4cqJCQELm6uqp8+fIaM2aM0tPTbdo5deqUunbtKh8fHxUpUkTdunXTjh07bK7padOmyWKx6Jdffsl0zm+++aacnZ2znEYFdwZGSgH/X5kyZRQVFaWpU6fqlVdeydXRUo8//rgqV66st956S999951GjRolPz8/TZkyRc2aNdOYMWMUFxenF198UXXq1FGjRo1s9h89erQsFosGDx6s48ePa8KECWrRooW2b99u/TVk5cqVioiIUK1atTR06FA5OTlZv5DWrVununXr2rT52GOPqUKFCnrzzTdljMk29sTERDVo0EDnz59X//795e/vrxkzZqht27b66quv9Mgjj6hRo0b6/PPP1bVrV7Vs2VJRUVHXfD0WLVokSeratWuOX8O0tDSFh4erXr16GjdunJYvX663335b5cqVU58+fXLczq22mZaWpqeeekpffPGF5s+fr8jISEn/dhJjY2P19NNPq27dukpOTtaWLVu0bds2tWzZ8rqx9O3bV0WKFNGwYcO0b98+TZo0SUeOHLEm2rp27arPPvtMS5cutZnjISEhQStXrrzmr9gBAQFyd3fXN998o379+snPzy/LepUrV9aIESP0xhtvqHfv3nrggQckSQ0aNLDWOXXqlCIiItSpUyc9+eSTCgwMlPRvx8nLy0uDBg2Sl5eXVq5cqTfeeEPJycn63//+J0l67bXXlJSUpD///NP6S3LGBPbp6elq27atfvzxR/Xu3VuVK1fWrl279M477+j333/XggULrDF0795dX375pbp27ar69etrzZo11vchQ5MmTRQSEqK4uDg98sgjNmVxcXEqV66cwsLCrvmeAMCdKC4uTo8++qhcXFzUuXNnTZo0SZs3b1adOnVUuHBhPfLII5o3b56mTJkiFxcX634LFixQamqqOnXqJOnGPtelf/sxX375pfr27atixYpZkwzvvvuu2rZtqy5duujSpUuaM2eOHnvsMX377bc2n/05+W6Q/u3X1K9f35oIK168uBYvXqyePXsqOTk5y2RThsWLF+vKlSs31H+RpI4dO6pMmTKKjY3Vtm3b9PHHHysgIEBjxoy5oXZutc0hQ4bozTff1JQpU9SrV6+bPnaG0aNH6/XXX1fHjh319NNP68SJE3r//ffVqFEj/fLLLzaj50+fPq3WrVvr0UcfVceOHfXVV19p8ODBql69uiIiIiT9O3K/WbNmio+P14ABAxQUFKRZs2Zp1apVNse9Vn8iw1tvvSUnJye9+OKLSkpK0tixY9WlSxdt2rQpR+fWsWNHlS5dWrGxsdq4caPee+89nT59Wp999pmkf/uwvXr10u7du22mnNi8ebN+//13DRkyJNu2Q0NDJUlz587VY489lu2I80aNGql///5677339Oqrr6py5cqSZP2vJO3bt0+dO3fWM888o169ell/pJw0aZKqVq2qtm3bqlChQvrmm2/03HPPKT09XdHR0ZL+HZXVr18/eXl5We9QyOjXnT9/Xo0bN9Zff/2lZ555RqVKldL69esVExOj+Ph4662T6enpatOmjX7++Wf16dNHlSpV0sKFC9WtWzebc+nQoYOio6MVFxenmjVr2pTFxcWpSZMmuuuuu67xjuC2ZoA73LRp04wks3nzZnPw4EFTqFAh079/f2t548aNTdWqVa3rhw4dMpLMtGnTMrUlyQwdOtS6PnToUCPJ9O7d27rtypUrpmTJksZisZi33nrLuv306dPG3d3ddOvWzbpt1apVRpK56667THJysnX7l19+aSSZd9991xhjTHp6uqlQoYIJDw836enp1nrnz583ZcqUMS1btswUU+fOnXP0+gwcONBIMuvWrbNuO3v2rClTpowpXbq0SUtLszn/6Ojo67b5yCOPGEnm9OnTOYqhW7duRpIZMWKEzfaaNWuaWrVqWdczXq9Vq1bZ1MvqPctpmxn7/u9//zOXL182jz/+uHF3dzdLly612e+ee+4xkZGROTqfq2Vcf7Vq1TKXLl2ybh87dqyRZBYuXGiMMSYtLc2ULFnSPP744zb7jx8/3lgsFvPHH39c8zhvvPGGkWQ8PT1NRESEGT16tNm6dWumeps3b872+m7cuLGRZCZPnpyp7Pz585m2PfPMM8bDw8NcvHjRui0yMtKEhoZmqvv5558bJycnm+vMGGMmT55sJJmffvrJGGPM1q1bjSQzcOBAm3rdu3fP9PcXExNjXF1dzZkzZ6zbjh8/bgoVKmRTDwDwry1bthhJZtmyZcaYf/sXJUuWNAMGDLDWWbp0qZFkvvnmG5t9H3zwQVO2bFnrek4/1435t//g5ORk9uzZkymm/36/XLp0yVSrVs00a9bMuu1Gvht69uxpgoODzcmTJ23qdurUyfj6+mb5fZbh+eefN5LML7/8km2dq2X0uZ566imb7Y888ojx9/e3rt9M3/J6bWbsm9Eve+GFF4yTk5OZPn16jmIPDQ29Zr/m8OHDxtnZ2YwePdpm+65du0yhQoVstmf0Hz777DPrttTUVBMUFGTat29v3fb2228bSWbBggXWbRcuXDCVKlXK1L/Lrj+R0ResXLmySU1NtW5/9913jSSza9eua553xuvbtm1bm+3PPfeckWR27NhhjDHmzJkzxs3NzQwePNimXv/+/Y2np6dJSUm55nGioqKMJFO0aFHzyCOPmHHjxplff/01U725c+dm2bc15t/3SJJZsmRJprKsruPw8HCbv1FjjKlatapp3LhxprojR440np6e5vfff7fZ/sorrxhnZ2dz9OhRY4wxX3/9tZFkJkyYYK2TlpZmmjVrluma7ty5sylRooTN/zts27Yt22sfdw5u3wOuUrZsWXXt2lUfffSR4uPjc63dp59+2vpvZ2dn1a5dW8YY9ezZ07q9SJEiqlixov74449M+0dFRcnb29u63qFDBwUHB+v777+XJG3fvl379+/XE088oVOnTunkyZM6efKkzp07p+bNm2vt2rWZhto+++yzOYr9+++/V926dW1u8fPy8lLv3r11+PBh7d27N2cvwlWSk5MlyeaccuK/MT/wwANZvl550ealS5esv8x+//33atWqlU15kSJFtGfPHu3fv/+m4ujdu7cKFy5sXe/Tp48KFSpkfY+dnJzUpUsXLVq0SGfPnrXWi4uLU4MGDVSmTJlrtj98+HDNmjVLNWvW1NKlS/Xaa6+pVq1auu+++/Trr7/mOE5XV9csb9u4ev6Cs2fP6uTJk3rg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M23ftGmTunfvbv+AAAAA8pmbun3v4sWL+uijj7R8+XLVqFFDhQsXtikfP358rgQHAABQUP3yyy+6//77M22vX7+++vbt64CIAAAA8pebSkrt3LlT9957ryRp9+7dNmVMeg4AAPBvn+js2bOZticlJSktLc0BEQEAAOQvN5WUWrVqVW7HAQAAcFtp1KiRYmNjNXv2bDk7O0uS0tLSFBsbq4YNGzo4OgAAAMe7qaQUAAAArm3MmDFq1KiRKlasqAceeECStG7dOiUnJ2vlypUOjg4AAMDxbiop1bRp02vepkdHCwAA3OmqVKminTt36oMPPtCOHTvk7u6uqKgo9e3bV35+fo4ODwAAwOFuKimVMZ9UhsuXL2v79u3avXu3unXrlhtxAQAAFHglSpTQm2++6egwAAAA8qWbSkq98847WW4fNmyYUlJSbikgAACA28n58+d19OhRXbp0yWZ7jRo1HBQRAABA/pCrc0o9+eSTqlu3rsaNG5ebzQIAABQ4J06cUI8ePbR48eIsy3kCHwAAuNM55WZjGzZskJubW242CQAAUCANHDhQZ86c0aZNm+Tu7q4lS5ZoxowZqlChghYtWuTo8AAAABzupkZKPfroozbrxhjFx8dry5Ytev3113MlMAAAgIJs5cqVWrhwoWrXri0nJyeFhoaqZcuW8vHxUWxsrCIjIx0dIgAAgEPdVFLK19fXZt3JyUkVK1bUiBEj1KpVq1wJDAAAoCA7d+6cAgICJElFixbViRMndPfdd6t69eratm2bg6MDAABwvJtKSk2bNi234wAAALitVKxYUfv27VPp0qV1zz33aMqUKSpdurQmT56s4OBgR4cHAADgcLc00fnWrVv166+/SpKqVq2qmjVr5kpQAAAABd2AAQMUHx8vSRo6dKhat26tuLg4ubi4aPr06Y4NDgAAIB+4qYnOjx8/rmbNmqlOnTrq37+/+vfvr1q1aql58+Y6ceJErgb4119/6cknn5S/v7/c3d1VvXp1bdmyJVePAQAAkNuefPJJde/eXZJUq1YtHTlyRJs3b9axY8f0+OOP57id2NhY1alTR97e3goICFC7du20b98+mzoXL15UdHS0/P395eXlpfbt2ysxMdGmztGjRxUZGSkPDw8FBATopZde0pUrV275PAEAAG7WTSWl+vXrp7Nnz2rPnj36559/9M8//2j37t1K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gYGB1vWsPqP/e63GxMSYMmXKmEuXLuXwFQEKJvpU9KkKEvpU9KluR/SpcDVu3ytAmjZtqu3bt1uX9957L8t6n376qXbu3Klt27Zp+vTpslgskqQdO3YoJSVF/v7+8vLysi6HDh2yDiX89ddfMw39DQsLs/573bp1NvtmNaT3v3bs2KFVq1bZ7FepUiVJshnCWKNGDZv9goODdfz4cUnSvn37FBISYnOvbt26da977AxVq1a1mSfi6raRd4wx163TpUsX6+0RxhjNnj1bXbp0kSSdO3dOBw8eVM+ePW2un1GjRmUa/lq7du1rHiclJUUvvviiKleurCJFisjLy0u//vqrjh49alPv6us9Y/3XX3+94Tr/dfX1HRwcLEk21/d/r+cbub5hH+3bt9fff/+tRYsWqXXr1lq9erXuu+8+TZ8+PUefr9K/tzN4e3tb1wMDA1WlShU5OTnZbLv682n58uVq3ry57rrrLnl7e6tr1646deqUzp8/b63j4eGhcuXKWddv5jNu+/bteuCBB1S4cOEb2g8oiOhT0acqaOhT/R/6VAUffSpcjYnOCxBPT0+VL1/+uvV27Nihc+fOycnJSfHx8dYP65SUFAUHB2v16tWZ9snpY15r165tc69sYGDgdfdJSUlRmzZtNGbMmExlGbFJyvRHa7FYlJ6enqO4ricv20Zm5cuXl8Vi0a+//qpHHnkkU/mvv/6qokWLqnjx4urcubMGDx6sbdu26cKFCzp27Jgef/xxSbLe4z116tRMHfv/Tkbr6el5zZhefPFFLVu2TOPGjVP58uXl7u6uDh066NKlS7dyqjl29TWY8T81XIMFj5ubm1q2bKmWLVvq9ddf19NPP62hQ4fqueeey9Hna1afRdf6fDp8+LAeeugh9enTR6NHj5afn59+/PFH9ezZU5cuXZKHh0e27ebkf2Cu5u7ufkP1gYKMPtXNo09lX/SpMqNPdXugT4UMJKVuM//884+6d++u1157TfHx8erSpYu2bdsmd3d33XfffUpISFChQoVUunTpLPevXLmyNm3apKioKOu2jRs3Wv/t7u6eo07c1e677z59/fXXKl26tAoVurlLrmLFijp27JgSExOtnbbNmzfb1HFxcZEkpaWl3dQxkHv8/f3VsmVLffjhh3r++edtPpgTEhIUFxenqKgoWSwWlSxZUo0bN1ZcXJwuXLigli1bKiAgQNK/HfQSJUrojz/+sP7Sd7N++uknde/e3dqhS0lJ0eHDhzPVu/p6z1ivXLlypm3//RupWbPmTcdWsWJFbd682abN/17fyJ+qVKmiBQsW5Ojz9WZs3bpV6enpevvtt62//H355Zc33I6Li8t1Pxtr1KihGTNm6PLly/yyB4g+lUSfKj+gT3Vj6FMVXPSp7lzcvnebefbZZxUSEqIhQ4Zo/PjxSktL04svvihJatGihcLCwtSuXTv98MMPOnz4sNavX6/XXntNW7ZskSQNGDBAn376qaZNm6bff/9dQ4cO1Z49e3J07KSkJJuh8Nu3b9exY8cUHR2tf/75R507d9bmzZt18OBBLV26VD169MhxZ6dly5YqV66cunXrpp07d+qnn37SkCFDJP3fLyQBAQFyd3fXkiVLlJiYqKSkpBt9+ZCLPvjgA6Wmpio8PFxr167VsWPHtGTJErVs2VJ33XWXzdMwunTpojlz5mju3LmZOkrDhw9XbGys3nvvPf3+++/atWuXpk2bpvHjx99QPBUqVNC8efO0fft27dixQ0888USWv6r99NNPGjt2rH7//XdNnDhRc+fO1YABA2zqzJ07V59++qn1b+Tnn39W3759byieq/Xr10+ffPKJZsyYof3792vUqFHauXOn9dqG4506dUrNmjXTzJkztXPnTh06dEhz587V2LFj9fDDD+fo8/VmlC9fXpcvX9b777+vP/74Q59//rkmT558w+2ULl1aO3fu1L59+3Ty5Mksn5TVt29fJScnq1OnTtqyZYv279+vzz//PNNTjYA7BX0q+lT5BX2qnKNPlf/Rp8J/kZS6jXz22Wf6/vvv9fnnn6tQoULy9PTUzJkzNXXqVC1evFgWi0Xff/+9GjVqpB49eujuu+9Wp06ddOTIEesvZY8//rhef/11vfzyy6pVq5aOHDmiPn365Oj4q1evVs2aNW2W4cOHq0SJEvrpp5+UlpamVq1aqXr16ho4cKCKFClic8/vtTg7O2vBggVKSUlRnTp19PTTT+u1116T9O/QT0kqVKiQ3nvvPU2ZMkUlSpTQww8/fBOvInJLhQoVtGXLFpUtW1YdO3ZUuXLl1Lt3bzVt2lQbNmyQn5+ftW6HDh2s93O3a9fOpp2nn35aH3/8saZNm6bq1aurcePGmj59uvVx1Tk1fvx4FS1aVA0aNFCbNm0UHh6u++67L1O9F154QVu2bFHNmjU1atQojR8/XuHh4TZ1hg8frjlz5qhGjRr67LPPNHv2bFWpUuWG4rlaly5dFBMToxdffFH33XefDh06pO7du1uvbTiel5eX6tWrp3feeUeNGjVStWrV9Prrr6tXr1764IMPcvT5ejPuuecejR8/XmPGjFG1atUUFxen2NjYG26nV69eqlixomrXrq3ixYvrp59+ylTH399fK1euVEpKiho3bqxatWpp6tSp/MKHOxJ9KvpU+Ql9qpyjT5X/0afCf1nMjd4gCeQTP/30kxo2bKgDBw7YTEYH3KzSpUtr4MCBGjhwYLZ1LBaL5s+fn6mjl9tatmypoKAgff7553l6HAAA6FMht9GnApBTzCmFAmP+/Pny8vJShQoVdODAAQ0YMED3338/nScUeOfPn9fkyZMVHh4uZ2dnzZ49W8uXL9eyZcscHRoA4DZEnwq3K/pUQMFDUgoFxtmzZzV48GAdPXpUxYoVU4sWLfT22287OizglmUMUx49erQuXryoihUr6uuvv1aLFi0cHRoA4DZEnwq3K/pUQMHD7XsAAAAAAACwOyY6BwAAAAAAgN2RlAIAAAAAAIDdkZQCAAAAAACA3ZGUAgAAAAAAgN2RlAIAAAAAAIDdkZQCAAAAAACA3ZGUAgAAAAAAgN2RlAIAAAAAAIDdkZQCAAAAAACA3f0/+bDxA8/5LgQAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## 3. Exploring Different Embedding Models\n","\n","Embeddings convert text into numerical vectors. Let's explore different embedding models:"],"metadata":{"id":"6twcUKy7EGVt"}},{"cell_type":"markdown","source":["### 3.1 Hugging Face Embeddings"],"metadata":{"id":"epduHyaEFb5P"}},{"cell_type":"code","source":["from llama_index.embeddings.huggingface import HuggingFaceEmbedding\n","\n","# Initialize a list to store results\n","embedding_results = []\n","\n","# Test different HuggingFace embedding models\n","hf_models = [\n","    \"sentence-transformers/all-MiniLM-L6-v2\",  # Small, fast model (384 dimensions)\n","    \"sentence-transformers/all-mpnet-base-v2\",  # More powerful (768 dimensions)\n","]\n","\n","for model_name in hf_models:\n","    start_time = time.time()\n","\n","    embed_model = HuggingFaceEmbedding(model_name=model_name)\n","\n","    # Generate an embedding for a test sentence\n","    test_text = \"Embeddings are numerical representations of text in vector space.\"\n","    embedding = embed_model.get_text_embedding(test_text)\n","\n","    end_time = time.time()\n","\n","    embedding_results.append({\n","        'Model': model_name,\n","        'Dimensions': len(embedding),\n","        'Generation Time (s)': end_time - start_time\n","    })\n","\n","# Display results\n","embedding_df = pd.DataFrame(embedding_results)\n","display(embedding_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":125},"id":"kBcZTDYkFcPj","executionInfo":{"status":"ok","timestamp":1751348734851,"user_tz":-480,"elapsed":2130,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"05ab34bd-d43b-4d6e-86ad-9c700bde3047"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["                                     Model  Dimensions  Generation Time (s)\n","0   sentence-transformers/all-MiniLM-L6-v2         384             1.154593\n","1  sentence-transformers/all-mpnet-base-v2         768             1.306800"],"text/html":["\n","  <div id=\"df-46028930-93fc-414b-ac0f-10851685cab3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Dimensions</th>\n","      <th>Generation Time (s)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>sentence-transformers/all-MiniLM-L6-v2</td>\n","      <td>384</td>\n","      <td>1.154593</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>sentence-transformers/all-mpnet-base-v2</td>\n","      <td>768</td>\n","      <td>1.306800</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46028930-93fc-414b-ac0f-10851685cab3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-46028930-93fc-414b-ac0f-10851685cab3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-46028930-93fc-414b-ac0f-10851685cab3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-b75be881-4862-4e26-afaf-646889e64bed\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b75be881-4862-4e26-afaf-646889e64bed')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-b75be881-4862-4e26-afaf-646889e64bed button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_98b065e0-6b65-4bbb-94fc-47b3b62b2b94\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('embedding_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_98b065e0-6b65-4bbb-94fc-47b3b62b2b94 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('embedding_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"embedding_df","summary":"{\n  \"name\": \"embedding_df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"sentence-transformers/all-mpnet-base-v2\",\n          \"sentence-transformers/all-MiniLM-L6-v2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dimensions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 271,\n        \"min\": 384,\n        \"max\": 768,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          768,\n          384\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Generation Time (s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10762669811960113,\n        \"min\": 1.1545932292938232,\n        \"max\": 1.306800365447998,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.306800365447998,\n          1.1545932292938232\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["### 3.2 OpenAI Embeddings (Optional)\n","\n","If you have an OpenAI API key, you can try their embeddings:"],"metadata":{"id":"FvhEc6QXFl8m"}},{"cell_type":"code","source":["# Uncomment if you have an OpenAI API key\n","'''\n","from llama_index.embeddings.openai import OpenAIEmbedding\n","\n","start_time = time.time()\n","\n","openai_embed_model = OpenAIEmbedding(model=\"text-embedding-3-small\")\n","openai_embedding = openai_embed_model.get_text_embedding(test_text)\n","\n","end_time = time.time()\n","\n","embedding_results.append({\n","    'Model': 'OpenAI text-embedding-3-small',\n","    'Dimensions': len(openai_embedding),\n","    'Generation Time (s)': end_time - start_time\n","})\n","\n","# Update results dataframe\n","embedding_df = pd.DataFrame(embedding_results)\n","display(embedding_df)\n","'''"],"metadata":{"id":"z8Czqh-lFgj6","colab":{"base_uri":"https://localhost:8080/","height":89},"executionInfo":{"status":"ok","timestamp":1751348734855,"user_tz":-480,"elapsed":5,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"79f38c52-d829-4c50-e9db-31d8189a6af7"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nfrom llama_index.embeddings.openai import OpenAIEmbedding\\n\\nstart_time = time.time()\\n\\nopenai_embed_model = OpenAIEmbedding(model=\"text-embedding-3-small\")\\nopenai_embedding = openai_embed_model.get_text_embedding(test_text)\\n\\nend_time = time.time()\\n\\nembedding_results.append({\\n    \\'Model\\': \\'OpenAI text-embedding-3-small\\',\\n    \\'Dimensions\\': len(openai_embedding),\\n    \\'Generation Time (s)\\': end_time - start_time\\n})\\n\\n# Update results dataframe\\nembedding_df = pd.DataFrame(embedding_results)\\ndisplay(embedding_df)\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["### 3.3 Visualizing Embedding Similarity\n","\n","Let's visualize how different texts are related in embedding space:"],"metadata":{"id":"n9qa3SLYFqL7"}},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","# Define some test sentences\n","test_sentences = [\n","    \"Neural networks are a powerful machine learning technique.\",\n","    \"Deep learning models have many layers of neurons.\",\n","    \"Embeddings represent words or sentences as vectors.\",\n","    \"Vector representations help computers understand semantics.\",\n","    \"The history of AI begins in the 1950s.\",\n","    \"Artificial intelligence research has evolved over decades.\"\n","]\n","\n","# Create embeddings for each sentence\n","embed_model = HuggingFaceEmbedding(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\n","embeddings = [embed_model.get_text_embedding(sent) for sent in test_sentences]\n","\n","# Calculate similarity matrix\n","similarity_matrix = cosine_similarity(embeddings)\n","\n","# Visualize the similarity matrix\n","plt.figure(figsize=(10, 8))\n","plt.imshow(similarity_matrix, cmap='viridis')\n","plt.colorbar(label='Cosine Similarity')\n","plt.xticks(np.arange(len(test_sentences)), [f\"Sent {i+1}\" for i in range(len(test_sentences))], rotation=45)\n","plt.yticks(np.arange(len(test_sentences)), [f\"Sent {i+1}\" for i in range(len(test_sentences))])\n","plt.title('Semantic Similarity Between Sentences')\n","plt.tight_layout()\n","plt.show()\n","\n","# Print the sentences for reference\n","for i, sent in enumerate(test_sentences):\n","    print(f\"Sentence {i+1}: {sent}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":914},"id":"ElmR2wnHFs7y","executionInfo":{"status":"ok","timestamp":1751349386404,"user_tz":-480,"elapsed":1773,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"7e1c9e93-3e74-4121-85dd-49c79c514034"},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA4YAAAMWCAYAAACtFZhOAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAepFJREFUeJzs3XlcVPX+x/H3AALK6gpoKK4pbuQamYqKYZammWXdXDC55c1uZraoKZqVS+Xya9HbYpTZzWyxMrWFxDQtU3PLm5qKmsqiJigqKHN+f3id2wQqy+gZOK/n43Ee1zlz5vv9zHyZLh8+3/P92gzDMAQAAAAAsCwPswMAAAAAAJiLxBAAAAAALI7EEAAAAAAsjsQQAAAAACyOxBAAAAAALI7EEAAAAAAsjsQQAAAAACyOxBAAAAAALI7EEAAAAAAsjsQQQLmVkpIim82mlJSUq9pvTEyMYmJiXNpmRESEhgwZ4nh8pd7bkCFDFBER4dI2AQCA+yMxBMq5rVu36o477lCdOnXk6+urWrVqqXv37nrppZfMDs1lXn31VSUlJV3xflJTUxUfH6/69evL19dXoaGh6tSpkxITE69432Y5deqUJk6c6PIENCkpSTabzemoUaOGunTpomXLlpW43av1s2Ams77Thw4d0sSJE7Vp06Yr2g8AwBw2wzAMs4MAcGWsWbNGXbp0Ue3atTV48GCFhobqwIED+uGHH7R792799ttvZofoEs2aNVO1atUKJC92u115eXny9vaWh0fp/g7222+/qW3btqpYsaKGDh2qiIgIHT58WBs3btSyZct05swZx7V5eXmSJG9v71L1+We5ubny8PBQhQoVJJ2vGHbp0kUrVqxwaXXy7Nmzstvt8vHxkSQdOXJE1atXV2JioiZOnOiyfpKSkhQfH6+nn35adevWlWEYSk9PV1JSkn755Rd9/vnnuvXWW4vd7sV+FsoLM7/T69evV9u2bfXWW285Va8BAOWDl9kBALhynn32WQUFBemnn35ScHCw03MZGRnmBHUVeXh4yNfX1yVtzZw5UydPntSmTZtUp04dp+f++lm6MiG84EKidqXk5OTIz8/PkXheLTfffLPatGnjeHzfffcpJCRE//73v0uUGJZ3Vv9OAwCuHKaSAuXY7t271bRp0wK/QEpSjRo1Cpx799131bp1a1WsWFFVqlTRgAEDdODAAadrYmJi1KxZM23ZskWdO3dWpUqV1KBBA3344YeSpJUrV6p9+/aqWLGirr32Wn3zzTdOr9+3b5/+8Y9/6Nprr1XFihVVtWpV9e/fX6mpqU7XXZhq+P3332vUqFGqXr26/Pz81LdvX2VmZjqui4iI0C+//KKVK1c6piReqKBd7D68H3/8UT179lTlypXl5+enFi1aaPbs2Zf9LK+55poCSWFhn+Vf7zG8EMcHH3ygSZMmqVatWgoICNAdd9yhrKws5ebmauTIkapRo4b8/f0VHx+v3Nxcpzb/eo9hYVatWqX+/furdu3a8vHxUXh4uB555BGdPn3a6bohQ4bI399fu3fvVs+ePRUQEKC//e1vjucu3GOYmpqq6tWrS5ImTZrk+HwnTpyot956SzabTT///HOBOJ577jl5enrq4MGDl4y3MMHBwapYsaK8vJz/bmm32zVr1iw1bdpUvr6+CgkJ0f33368//vjDcc3FfhaOHz8uT09P/d///Z/j2iNHjsjDw0NVq1bVnyfODB8+XKGhoU59//jjj+rRo4eCgoJUqVIlde7cWd9//32B2A8ePKihQ4cqJCREPj4+atq0qebNm+d0zZ9/Fp599lldc8018vX1Vbdu3YpU7buS3+nt27erS5cuqlSpkmrVqqXp06c7xd22bVtJUnx8vOPz/fO03aJ8ThMnTpTNZtNvv/2mIUOGKDg4WEFBQYqPj9epU6cKjb9du3aqVKmSKleurE6dOumrr75yumbZsmXq2LGj/Pz8FBAQoFtuuUW//PKL0zVpaWmKj4/XNddcIx8fH4WFhem2224r8N8dALAyEkOgHKtTp442bNigbdu2XfbaZ599VoMGDVLDhg01Y8YMjRw5UsnJyerUqZOOHz/udO0ff/yhW2+9Ve3bt9f06dPl4+OjAQMGaOHChRowYIB69uypqVOnKicnR3fccYdOnDjheO1PP/2kNWvWaMCAAfq///s/PfDAA0pOTlZMTEyhvxg+9NBD2rx5sxITEzV8+HB9/vnnGjFihOP5WbNm6ZprrlHjxo01f/58zZ8/X+PGjbvo+/z666/VqVMnbd++XQ8//LBefPFFdenSRUuWLLnsZ3ngwAF9++23l/0sL2bKlCn68ssv9eSTT2ro0KH6+OOP9cADD2jo0KHauXOnJk6cqNtvv11JSUmaNm1asdtftGiRTp06peHDh+ull15SXFycXnrpJQ0aNKjAtefOnVNcXJxq1KihF154Qf369StwTfXq1TVnzhxJUt++fR2f7+2336477rhDFStW1IIFCwq8bsGCBYqJiVGtWrUuG3NWVpaOHDmizMxM/fLLLxo+fLhOnjype++91+m6+++/X4899pg6dOig2bNnKz4+XgsWLFBcXJzOnj0r6eI/C8HBwWrWrJm+++47R3urV6+WzWbTsWPHtH37dsf5VatWqWPHjo7H3377rTp16qTs7GwlJibqueee0/Hjx9W1a1etW7fOcV16erquv/56ffPNNxoxYoRmz56tBg0a6L777tOsWbMKvO+pU6fqk08+0ejRozVmzBj98MMPjuT8Uq7kd7pHjx5q2bKlXnzxRTVu3FhPPPGE437PJk2a6Omnn5Yk/f3vf3d8vp06dSrW53TBnXfeqRMnTmjKlCm68847lZSUpEmTJjldM2nSJA0cOFAVKlTQ008/rUmTJik8PNzpOzh//nzdcsst8vf317Rp0zR+/Hht375dN954o1PS169fP33yySeKj4/Xq6++qn/+8586ceKE9u/ff9nPEQAswwBQbn311VeGp6en4enpaURHRxuPP/648eWXXxp5eXlO16Wmphqenp7Gs88+63R+69athpeXl9P5zp07G5KM9957z3Hu119/NSQZHh4exg8//OA4/+WXXxqSjLfeestx7tSpUwXiXLt2rSHJeOeddxzn3nrrLUOSERsba9jtdsf5Rx55xPD09DSOHz/uONe0aVOjc+fOBdpdsWKFIclYsWKFYRiGce7cOaNu3bpGnTp1jD/++MPp2j/3UZht27YZFStWNCQZUVFRxsMPP2wsXrzYyMnJKXBt586dneK5EEezZs2cPvu7777bsNlsxs033+z0+ujoaKNOnTpO5+rUqWMMHjz4ou/NMAr/bKdMmWLYbDZj3759jnODBw82JBlPPvlkgesHDx7s1HdmZqYhyUhMTCxw7d13323UrFnTyM/Pd5zbuHFjgTEvzIXx/evh4+NjJCUlOV27atUqQ5KxYMECp/PLly8vcP5iPwsPPvigERIS4ng8atQoo1OnTkaNGjWMOXPmGIZhGEePHjVsNpsxe/ZswzDO/0w0bNjQiIuLc/r5OHXqlFG3bl2je/fujnP33XefERYWZhw5csSp3wEDBhhBQUGOsbkwbk2aNDFyc3Md182ePduQZGzduvWSn9uV/E7/+fuXm5trhIaGGv369XOc++mnnwod2+J8TomJiYYkY+jQoU5t9O3b16hatarj8a5duwwPDw+jb9++Tj9fF/ozDMM4ceKEERwcbCQkJDg9n5aWZgQFBTnO//HHH4Yk4/nnnzcAABdHxRAox7p37661a9eqd+/e2rx5s6ZPn664uDjVqlVLn332meO6jz/+WHa7XXfeeaeOHDniOEJDQ9WwYUOtWLHCqV1/f38NGDDA8fjaa69VcHCwmjRpovbt2zvOX/j3nj17HOcqVqzo+PfZs2d19OhRNWjQQMHBwdq4cWOB9/D3v/9dNpvN8bhjx47Kz8/Xvn37iv15/Pzzz9q7d69GjhxZYCren/soTNOmTbVp0ybde++9Sk1N1ezZs9WnTx+FhITo9ddfL1L/gwYNcrqHr3379jIMQ0OHDnW6rn379jpw4IDOnTtXtDf2X3/+bHNycnTkyBHdcMMNMgyj0Cmfw4cPL1b7fzVo0CAdOnTI6edjwYIFqlixYqEVyMK88sor+vrrr/X111/r3XffVZcuXTRs2DB9/PHHjmsWLVqkoKAgde/e3enns3Xr1vL39y/w81mYjh07Kj09XTt27JB0vjLYqVMndezYUatWrZJ0vopoGIajYrhp0ybt2rVL99xzj44ePeroNycnR926ddN3330nu90uwzD00UcfqVevXjIMwynGuLg4ZWVlFfjZjo+Pd7oX9UKff/6uFOZKfqf/XKX19vZWu3btLhtPcT6nP3vggQecHnfs2FFHjx5Vdna2JGnx4sWy2+2aMGFCgYWjLnxXv/76ax0/flx3332303v09PRU+/btHe+xYsWK8vb2VkpKitPUYwCAMxafAcq5tm3b6uOPP1ZeXp42b96sTz75RDNnztQdd9yhTZs2KTIyUrt27ZJhGGrYsGGhbfx1QZJrrrmmQCIVFBSk8PDwAuckOf0ydvr0aU2ZMkVvvfWWDh486HR/V1ZWVoG+a9eu7fS4cuXKBdosqt27d0s6v3JlSTRq1Ejz589Xfn6+tm/friVLlmj69On6+9//rrp16yo2NvaSr//re7nw+RT2udntdmVlZalq1apFjm///v2aMGGCPvvsswKfz18/Wy8vL11zzTVFbrsw3bt3V1hYmBYsWKBu3brJbrfr3//+t2677TYFBAQUqY127do5LT5z991367rrrtOIESN06623ytvbW7t27VJWVlah99BJRVt05ULitWrVKl1zzTX6+eef9cwzz6h69ep64YUXHM8FBgaqZcuWkqRdu3ZJkgYPHnzRdrOysnT27FkdP35cr732ml577bUixVian+ur9Z2uXLmytmzZctl4ivo5XXiP0qXff2BgoHbv3i0PDw9FRkZett+uXbsW+nxgYKCk8ws3TZs2TY8++qhCQkJ0/fXX69Zbb9WgQYMK3E8KAFZGYghYhLe3t9q2bau2bduqUaNGio+P16JFi5SYmCi73S6bzaZly5bJ09OzwGv9/f2dHhd2zaXO/zn5e+ihh/TWW29p5MiRio6OVlBQkGw2mwYMGFCgqlDUNq82T09PNW/eXM2bN1d0dLS6dOmiBQsWXDYxLM3ndjn5+fnq3r27jh07pieeeEKNGzeWn5+fDh48qCFDhhT4bH18fEq9hYenp6fuuecevf7663r11Vf1/fff69ChQwXuDywODw8PdenSRbNnz9auXbvUtGlT2e121ahRo9D7GSU5Fsi5lJo1a6pu3br67rvvFBERIcMwFB0drerVq+vhhx/Wvn37tGrVKt1www2Oz+XCZ/b8888rKiqq0Hb9/f119OhRSdK999570eSoRYsWTo9dMeZX4ztdlHiK+jm5qr+/9jt//vxCE7w/L2A0cuRI9erVS4sXL9aXX36p8ePHa8qUKfr222913XXXFblPACjPSAwBC7pQoTl8+LAkqX79+jIMQ3Xr1lWjRo2uaN8ffvihBg8erBdffNFx7syZMwUWwyiOy00DvaB+/fqSpG3btl02iSuqv36WZtm6dat27typt99+22mxma+//rpU7V7usx00aJBefPFFff7551q2bJmqV6+uuLi4UvV5YQrtyZMnJZ0ft2+++UYdOnRwmi5b3Hg7duyo7777TnXr1lVUVJQCAgLUsmVLBQUFafny5dq4caPTAigXfl4CAwMv+fNSvXp1BQQEKD8/32U/V8V1Nb7TF/tsi/o5FUf9+vVlt9u1ffv2iyabF/qtUaNGkfqtX7++Hn30UT366KPatWuXoqKi9OKLL+rdd991ScwAUNZxjyFQjq1YsaLQv8AvXbpU0vl7AyXp9ttvl6enpyZNmlTgesMwHBURV/D09CzQx0svvaT8/PwSt+nn51ekxLJVq1aqW7euZs2aVeD6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jh0rdvskhgAAAADcB4vPFGrmzJkKCAhw/NsVm9r/GYkhAAAAALi5wYMHO/49ZMgQl7fPPYYAAAAAUIZs3LhRW7dudTz+9NNP1adPH40dO1Z5eXklapPEEAAAAID7MNzkcGP333+/du7cKUnas2eP7rrrLlWqVEmLFi3S448/XqI2SQwBAAAAoAzZuXOnoqKiJEmLFi1S586d9d577ykpKUkfffRRidokMQQAAACAMsQwDNntdknSN998o549e0qSwsPDdeTIkRK1yeIzAAAAANyGzQ02uDe7/8tp06aNnnnmGcXGxmrlypWaM2eOJGnv3r0KCQkpUZtUDAEAAACgDJk1a5Y2btyoESNGaNy4cWrQoIEk6cMPP9QNN9xQojapGAIAAABAGdKiRQunVUkveP755+Xp6VmiNkkMAQAAAKAM2rBhg/7zn/9IkiIjI9WqVasSt0ViCAAAAABlSEZGhu666y6tXLlSwcHBkqTjx4+rS5cuev/991W9evVit8k9hgAAAADch9n7F5aBfQwfeughnTx5Ur/88ouOHTumY8eOadu2bcrOztY///nPErVJxRAAAAAAypDly5frm2++UZMmTRznIiMj9corr+imm24qUZtUDAEAAACgDLHb7apQoUKB8xUqVHDsb1hcJIYAAAAA3MaFfQzNPtxZ165d9fDDD+vQoUOOcwcPHtQjjzyibt26lahNEkMAAAAAKENefvllZWdnKyIiQvXr11f9+vVVt25dZWdn66WXXipRm9xjCAAAAABlSHh4uDZu3KhvvvlGv/76qySpSZMmio2NLXGbVAwBAAAAuJcyuCLpK6+8ooiICPn6+qp9+/Zat27dRa9NSkqSzWZzOnx9fYvVn81mU/fu3fXQQw/poYceKlVSKJEYAgAAAECpLFy4UKNGjVJiYqI2btyoli1bKi4uThkZGRd9TWBgoA4fPuw49u3bd9l+vv32W0VGRio7O7vAc1lZWWratKlWrVpVovdAYggAAADAfZhdLSxB1XDGjBlKSEhQfHy8IiMjNXfuXFWqVEnz5s276GtsNptCQ0MdR0hIyGX7mTVrlhISEhQYGFjguaCgIN1///2aMWNG8YL/LxJDAAAAAChEdna205Gbm1vgmry8PG3YsMFpKqeHh4diY2O1du3ai7Z98uRJ1alTR+Hh4brtttv0yy+/XDaezZs3q0ePHhd9/qabbtKGDRsu205hipUYZmZmavjw4apdu7Z8fHwUGhqquLg4ff/99yXq/GJiYmI0cuTIYr3mgQcekM1m06xZs1waCwAAAABrCg8PV1BQkOOYMmVKgWuOHDmi/Pz8AhW/kJAQpaWlFdrutddeq3nz5unTTz/Vu+++K7vdrhtuuEG///77JeNJT08vdP/CC7y8vJSZmVmEd1bIa4tzcb9+/ZSXl6e3335b9erVU3p6upKTk3X06NESde4qn3zyiX744QfVrFnT1DgAAAAAlI477CN4of8DBw44Tdv08fFxSfvR0dGKjo52PL7hhhvUpEkT/etf/9LkyZMv+rpatWpp27ZtatCgQaHPb9myRWFhYSWKqcgVw+PHj2vVqlWaNm2aunTpojp16qhdu3YaM2aMevfu7XTdsGHDVL16dQUGBqpr167avHmz4/mJEycqKipK8+fPV0REhIKCgjRgwACdOHFCkjRkyBCtXLlSs2fPdqzQk5qaetG4Dh48qIceekgLFiy4ZPYMAAAAAMURGBjodBSWGFarVk2enp5KT093Op+enq7Q0NAi9VOhQgVdd911+u233y55Xc+ePTV+/HidOXOmwHOnT59WYmKibr311iL1+VdFTgz9/f3l7++vxYsXFzq39oL+/fsrIyNDy5Yt04YNG9SqVSt169ZNx44dc1yze/duLV68WEuWLNGSJUu0cuVKTZ06VZI0e/ZsRUdHKyEhwbFCT3h4eKF92e12DRw4UI899piaNm1a1LcCAAAAAC7h7e2t1q1bKzk52XHObrcrOTnZqSp4Kfn5+dq6detlq31PPfWUjh07pkaNGmn69On69NNP9emnn2ratGm69tprdezYMY0bN65E76PIU0m9vLyUlJSkhIQEzZ07V61atVLnzp01YMAAtWjRQpK0evVqrVu3ThkZGY5s+oUXXtDixYv14Ycf6u9//7uk8x9UUlKSAgICJEkDBw5UcnKynn32WQUFBcnb21uVKlW6bIY9bdo0eXl56Z///GeR3kNubq5TUlvYMq8AAAAATFSKvQRdGkMxjBo1SoMHD1abNm3Url07zZo1Szk5OYqPj5ckDRo0SLVq1XLco/j000/r+uuvV4MGDXT8+HE9//zz2rdvn4YNG3bJfkJCQrRmzRoNHz5cY8aMkWGcD9RmsykuLk6vvPJKkVY3LUyx7zG85ZZbtGrVKv3www9atmyZpk+frjfeeENDhgzR5s2bdfLkSVWtWtXpdadPn9bu3bsdjyMiIhxJoSSFhYVdco+PwmzYsEGzZ8/Wxo0bZbPZivSaKVOmaNKkScXqBwAAAAAu5a677lJmZqYmTJigtLQ0RUVFafny5Y4kbf/+/fLw+N9kzT/++EMJCQlKS0tT5cqV1bp1a61Zs0aRkZGX7atOnTpaunSp/vjjD/32228yDEMNGzZU5cqVS/UeipUYSpKvr6+6d++u7t27a/z48Ro2bJgSExM1ZMgQnTx5UmFhYUpJSSnwuuDgYMe//3ovoM1mk91uL1Ycq1atUkZGhmrXru04l5+fr0cffVSzZs0q9L7EMWPGaNSoUY7H2dnZF52mCgAAAODqc6fFZ4pjxIgRGjFiRKHP/TU/mjlzpmbOnFmCyP6ncuXKatu2bana+LNiJ4Z/FRkZqcWLF0uSWrVqpbS0NHl5eSkiIqLEbXp7eys/P/+S1wwcONBprxBJiouL08CBAx0l27/y8fFx2UpCAAAAAFBeFDkxPHr0qPr376+hQ4eqRYsWCggI0Pr16zV9+nTddtttkqTY2FhFR0erT58+mj59uho1aqRDhw7piy++UN++fdWmTZsi9RUREaEff/xRqamp8vf3V5UqVZxKr5JUtWrVAlNWK1SooNDQUF177bVFfVsAAAAAYHlFTgz9/f3Vvn17zZw5U7t379bZs2cVHh6uhIQEjR07VtL5KaFLly7VuHHjFB8fr8zMTIWGhqpTp07Fugly9OjRGjx4sCIjI3X69Gnt3bu3VBVIAAAAAGVEGVx8pjywGReWsrGg7OxsBQUFqU3fyfKq4Gt2OHABnz/OmR0CXOjIiFNmhwAX2tLu32aHABe75cY+ZocAF8qv7Gd2CHCRc/m5WvHzVGVlZTltzu7uLvxu3ujR5+TpY+7v5vm5Z7TzxbFl7jMsjSLvYwgAAAAAKJ9KvfgMAAAAALgMU0lNQcUQAAAAACyOxBAAAAAALI6ppAAAAADcRlnd4L6so2IIAAAAABZHxRAAAACA+2DxGVNQMQQAAAAAiyMxBAAAAACLYyopAAAAAPfBVFJTUDEEAAAAAIsjMQQAAAAAi2MqKQAAAAC3wT6G5qBiCAAAAAAWR8UQAAAAgPtg8RlTUDEEAAAAAIsjMQQAAAAAi2MqKQAAAAC3weIz5qBiCAAAAAAWR2IIAAAAABbHVFIAAAAA7oNVSU1BxRAAAAAALI7EEAAAAAAsjqmkAAAAANwHU0lNQcUQAAAAACyOiiEAAAAAt2H772F2DFZDxRAAAAAALI7EEAAAAAAsjqmkAAAAANwHi8+YgoohAAAAAFgciSEAAAAAWBxTSQEAAAC4DZtx/jA7BquhYggAAAAAFkfFEAAAAID7YPEZU1AxBAAAAACLIzEEAAAAAItjKikAAAAA92LBqZxmo2IIAAAAABZHYggAAAAAFsdUUgAAAABug30MzUHFEAAAAAAsjsQQAAAAACyOqaQAAAAA3Acb3JuCiiEAAAAAWBwVQwAAAABug8VnzEHFEAAAAAAsjsQQAAAAACyOqaQAAAAA3AeLz5iCiiEAAAAAWByJIQAAAABYHFNJAQAAALgNViU1B4mhpMAd2fLyzDU7DLiALTfP7BDgQmF99pgdAlzolnp9zA4BLvbF6sVmhwAXqrt8mNkhwEXsp23SP8yOAmUNU0kBAAAAwOKoGAIAAABwH6xKagoqhgAAAABgcVQMAQAAALgPKoamoGIIAAAAABZHYggAAAAAFsdUUgAAAABug30MzUHFEAAAAAAsjsQQAAAAACyOqaQAAAAA3AerkpqCiiEAAAAAWBwVQwAAAABuw2YYshnmluzM7t8MVAwBAAAAwOJIDAEAAACglF555RVFRETI19dX7du317p164r0uvfff182m019+vS5sgFeBokhAAAAAPdhuMlRDAsXLtSoUaOUmJiojRs3qmXLloqLi1NGRsYlX5eamqrRo0erY8eOxevwCiAxBAAAAIBSmDFjhhISEhQfH6/IyEjNnTtXlSpV0rx58y76mvz8fP3tb3/TpEmTVK9evasYbeFIDAEAAACgENnZ2U5Hbm5ugWvy8vK0YcMGxcbGOs55eHgoNjZWa9euvWjbTz/9tGrUqKH77rvvisReXCSGAAAAANyGzXCPQ5LCw8MVFBTkOKZMmVIg3iNHjig/P18hISFO50NCQpSWllboe1y9erXefPNNvf766y7//EqK7SoAAAAAoBAHDhxQYGCg47GPj0+p2zxx4oQGDhyo119/XdWqVSt1e65CYggAAAAAhQgMDHRKDAtTrVo1eXp6Kj093el8enq6QkNDC1y/e/dupaamqlevXo5zdrtdkuTl5aUdO3aofv36Loi+eJhKCgAAAMB9mL0aaTFXJfX29lbr1q2VnJzsOGe325WcnKzo6OgC1zdu3Fhbt27Vpk2bHEfv3r3VpUsXbdq0SeHh4UXv3IWoGAIAAABAKYwaNUqDBw9WmzZt1K5dO82aNUs5OTmKj4+XJA0aNEi1atXSlClT5Ovrq2bNmjm9Pjg4WJIKnL+aSAwBAAAAuI0/L/5iZgzFcddddykzM1MTJkxQWlqaoqKitHz5cseCNPv375eHh3tP1iQxBAAAAIBSGjFihEaMGFHocykpKZd8bVJSkusDKib3TlsBAAAAAFccFUMAAAAA7qOYi79csRgshoohAAAAAFgciSEAAAAAWBxTSQEAAAC4jbK4Kml5QMUQAAAAACyOiiEAAAAA98HiM6agYggAAAAAFkdiCAAAAAAWx1RSAAAAAG7Fiou/mI2KIQAAAABYHIkhAAAAAFgcU0kBAAAAuA/DOH+YHYPFUDEEAAAAAIsjMQQAAAAAi2MqKQAAAAC3YTPMX5XU7P7NQMUQAAAAACyOiiEAAAAA92H89zA7BouhYggAAAAAFkdiCAAAAAAWx1RSAAAAAG7DZj9/mB2D1VAxBAAAAACLIzEEAAAAAItjKikAAAAA98GqpKagYggAAAAAFkfFEAAAAIDbsBnnD7NjsBoqhgAAAABgcSSGAAAAAGBxTCUFAAAA4D4M4/xhdgwWU6yKYWZmpoYPH67atWvLx8dHoaGhiouL0/fff+/SoGJiYjRy5MjLXjdkyBDZbDano0ePHi6NBQAAAADKu2JVDPv166e8vDy9/fbbqlevntLT05WcnKyjR49eqfguq0ePHnrrrbccj318fEyLBQAAAADKoiJXDI8fP65Vq1Zp2rRp6tKli+rUqaN27dppzJgx6t27t9N1w4YNU/Xq1RUYGKiuXbtq8+bNjucnTpyoqKgozZ8/XxEREQoKCtKAAQN04sQJSeergCtXrtTs2bMdVcDU1NSLxnWhcnnhqFy5cgk+BgAAAADu4MKqpGYfVlPkxNDf31/+/v5avHixcnNzL3pd//79lZGRoWXLlmnDhg1q1aqVunXrpmPHjjmu2b17txYvXqwlS5ZoyZIlWrlypaZOnSpJmj17tqKjo5WQkKDDhw/r8OHDCg8Pv2h/KSkpqlGjhq699loNHz7c1OolAAAAAJRFRU4Mvby8lJSUpLffflvBwcHq0KGDxo4dqy1btjiuWb16tdatW6dFixapTZs2atiwoV544QUFBwfrww8/dFxnt9uVlJSkZs2aqWPHjho4cKCSk5MlSUFBQfL29lalSpUcVUBPT89CY+rRo4feeecdJScna9q0aVq5cqVuvvlm5efnF3p9bm6usrOznQ4AAAAAsLpiLT7Tr18/HTp0SJ999pl69OihlJQUtWrVSklJSZKkzZs36+TJk6pataqjwujv76+9e/dq9+7djnYiIiIUEBDgeBwWFqaMjIxiBz9gwAD17t1bzZs3V58+fbRkyRL99NNPSklJKfT6KVOmKCgoyHFcqhIJAAAAwASGmxwWU+ztKnx9fdW9e3d1795d48eP17Bhw5SYmKghQ4bo5MmTCgsLKzQxCw4Odvy7QoUKTs/ZbDbZ7fZiB/9X9erVU7Vq1fTbb7+pW7duBZ4fM2aMRo0a5XicnZ1NcggAAADA8kq9j2FkZKQWL14sSWrVqpXS0tLk5eWliIiIErfp7e190emgl/L777/r6NGjCgsLK/R5Hx8fVi0FAAAA3Jg7LP5idv9mKPJU0qNHj6pr16569913tWXLFu3du1eLFi3S9OnTddttt0mSYmNjFR0drT59+uirr75Samqq1qxZo3Hjxmn9+vVFDioiIkI//vijUlNTdeTIkUKriSdPntRjjz2mH374QampqUpOTtZtt92mBg0aKC4ursh9AQAAAIDVFbli6O/vr/bt22vmzJnavXu3zp49q/DwcCUkJGjs2LGSzk8JXbp0qcaNG6f4+HhlZmYqNDRUnTp1UkhISJGDGj16tAYPHqzIyEidPn1ae/fuLVCB9PT01JYtW/T222/r+PHjqlmzpm666SZNnjyZqiAAAAAAFIPNMAwLFkrPy87OVlBQkLpGPiYvT5LJ8sCWm2d2CHCh/F17zA4BLuRVL8LsEOBiX6xebHYIcKG6y4eZHQJcxH76jH7/x0RlZWUpMDDQ7HCK7MLv5tf3fFpeFXxNjeXc2TP6YemEMvcZlkaxViUFAAAAAJQ/JIYAAAAAYHGlXpUUAAAAAFyFVUnNQcUQAAAAACyOxBAAAAAALI6ppAAAAADch/Hfw+wYLIaKIQAAAABYHBVDAAAAAG6DxWfMQcUQAAAAACyOxBAAAAAALI6ppAAAAADch904f5gdg8VQMQQAAAAAiyMxBAAAAACLYyopAAAAAPfBPoamoGIIAAAAABZHxRAAAACA27DJ/H0EbeZ2bwoqhgAAAABgcSSGAAAAAGBxTCUFAAAA4D4M4/xhdgwWQ8UQAAAAACyOxBAAAAAALI6ppAAAAADchs1wg1VJrTeTlIohAAAAAFgdiSEAAAAAWBxTSQEAAAC4D+O/h9kxWAwVQwAAAACwOCqGAAAAANyGzTBkM3kfQbP7NwMVQwAAAACwOBJDAAAAALA4EkMAAAAA7sPuJkcxvfLKK4qIiJCvr6/at2+vdevWXfTajz/+WG3atFFwcLD8/PwUFRWl+fPnF79TFyIxBAAAAIBSWLhwoUaNGqXExERt3LhRLVu2VFxcnDIyMgq9vkqVKho3bpzWrl2rLVu2KD4+XvHx8fryyy+vcuT/Q2IIAAAAAKUwY8YMJSQkKD4+XpGRkZo7d64qVaqkefPmFXp9TEyM+vbtqyZNmqh+/fp6+OGH1aJFC61evfoqR/4/JIYAAAAA3MaFVUnNPooqLy9PGzZsUGxsrOOch4eHYmNjtXbt2su+3jAMJScna8eOHerUqVOJPjNXYLsKAAAAAChEdna202MfHx/5+Pg4nTty5Ijy8/MVEhLidD4kJES//vrrRdvOyspSrVq1lJubK09PT7366qvq3r2764IvJiqGAAAAANyH4SaHpPDwcAUFBTmOKVOmuOxtBgQEaNOmTfrpp5/07LPPatSoUUpJSXFZ+8VFxRAAAAAACnHgwAEFBgY6Hv+1WihJ1apVk6enp9LT053Op6enKzQ09KJte3h4qEGDBpKkqKgo/ec//9GUKVMUExPjmuCLiYohAAAAABQiMDDQ6SgsMfT29lbr1q2VnJzsOGe325WcnKzo6Ogi92W325Wbm+uSuEuCiiEAAAAA92EY5w+zYyiGUaNGafDgwWrTpo3atWunWbNmKScnR/Hx8ZKkQYMGqVatWo6pqFOmTFGbNm1Uv3595ebmaunSpZo/f77mzJnj8rdSVCSGAAAAAFAKd911lzIzMzVhwgSlpaUpKipKy5cvdyxIs3//fnl4/G+yZk5Ojv7xj3/o999/V8WKFdW4cWO9++67uuuuu8x6CySGAAAAAFBaI0aM0IgRIwp97q+LyjzzzDN65plnrkJURUdiCAAAAMBt2Izzh9kxWA2LzwAAAACAxZEYAgAAAIDFMZUUAAAAgPsog6uSlgdUDAEAAADA4qgYAgAAAHAbNvv5w+wYrIaKIQAAAABYHIkhAAAAAFgcU0kBAAAAuA8WnzEFFUMAAAAAsDgSQwAAAACwOKaSAgAAAHAfxn8Ps2OwGBJDSUfaBsvT29fsMOACvn9YcG3hcizo1BmzQ4AL5Vf2MzsEuFjd5cPMDgEutLfHG2aHABfJPmFXZbODQJlDYggAAADAbdgMQzaTF38xu38zcI8hAAAAAFgciSEAAAAAWBxTSQEAAAC4D/YxNAUVQwAAAACwOBJDAAAAALA4ppICAAAAcB+GJLN3ILPeTFIqhgAAAABgdSSGAAAAAGBxTCUFAAAA4DbY4N4cVAwBAAAAwOKoGAIAAABwH4bM30fQegVDKoYAAAAAYHUkhgAAAABgcUwlBQAAAOA+DMMNppJaby4pFUMAAAAAsDgSQwAAAACwOKaSAgAAAHAfdkk2N4jBYqgYAgAAAIDFkRgCAAAAgMUxlRQAAACA27AZhmwmrwpqdv9moGIIAAAAABZHxRAAAACA+2AfQ1NQMQQAAAAAiyMxBAAAAACLYyopAAAAAPfBVFJTUDEEAAAAAIsjMQQAAAAAi2MqKQAAAAD3wVRSU1AxBAAAAACLo2IIAAAAwH3YJdncIAaLoWIIAAAAABZHYggAAAAAFsdUUgAAAABuw2YYspm8+IvZ/ZuBiiEAAAAAWByJIQAAAABYHFNJAQAAALgP9jE0BRVDAAAAALA4EkMAAAAAsDimkgIAAABwH3ZDspk8ldPOVFIAAAAAgMVQMQQAAADgPlh8xhRUDAEAAADA4kgMAQAAAMDimEoKAAAAwI24wVRSmd3/1UfFEAAAAAAsjsQQAAAAACyOqaQAAAAA3AerkpqCiiEAAAAAWBwVQwAAAADuw27I9MVf7FQMAQAAAAAWQ2IIAAAAABZXrMQwMzNTw4cPV+3ateXj46PQ0FDFxcXp+++/d2lQMTExGjlyZJGu/c9//qPevXsrKChIfn5+atu2rfbv3+/SeAAAAABcJYbdPQ6LKdY9hv369VNeXp7efvtt1atXT+np6UpOTtbRo0evVHyXtHv3bt1444267777NGnSJAUGBuqXX36Rr6+vKfEAAAAAQFlU5Irh8ePHtWrVKk2bNk1dunRRnTp11K5dO40ZM0a9e/d2um7YsGGqXr26AgMD1bVrV23evNnx/MSJExUVFaX58+crIiJCQUFBGjBggE6cOCFJGjJkiFauXKnZs2fLZrPJZrMpNTW10JjGjRunnj17avr06bruuutUv3599e7dWzVq1CjhxwEAAAAA1lPkxNDf31/+/v5avHixcnNzL3pd//79lZGRoWXLlmnDhg1q1aqVunXrpmPHjjmu2b17txYvXqwlS5ZoyZIlWrlypaZOnSpJmj17tqKjo5WQkKDDhw/r8OHDCg8PL9CP3W7XF198oUaNGikuLk41atRQ+/bttXjx4mK8fQAAAABu5cI+hmYfFlPkxNDLy0tJSUl6++23FRwcrA4dOmjs2LHasmWL45rVq1dr3bp1WrRokdq0aaOGDRvqhRdeUHBwsD788EPHdXa7XUlJSWrWrJk6duyogQMHKjk5WZIUFBQkb29vVapUSaGhoQoNDZWnp2eBeDIyMnTy5ElNnTpVPXr00FdffaW+ffvq9ttv18qVKwt9D7m5ucrOznY6AAAAAMDqirX4TL9+/XTo0CF99tln6tGjh1JSUtSqVSslJSVJkjZv3qyTJ0+qatWqjgqjv7+/9u7dq927dzvaiYiIUEBAgONxWFiYMjIyihW43X7+htDbbrtNjzzyiKKiovTkk0/q1ltv1dy5cwt9zZQpUxQUFOQ4CqtEAgAAAEBxvfLKK4qIiJCvr6/at2+vdevWXfTa119/XR07dlTlypVVuXJlxcbGXvL6q6HY21X4+vqqe/fuGj9+vNasWaMhQ4YoMTFRknTy5EmFhYVp06ZNTseOHTv02GOPOdqoUKGCU5s2m82R6BVVtWrV5OXlpcjISKfzTZo0ueiqpGPGjFFWVpbjOHDgQLH6BAAAAHCF2Q33OIph4cKFGjVqlBITE7Vx40a1bNlScXFxFy1+paSk6O6779aKFSu0du1ahYeH66abbtLBgwdd8QmWSKn3MYyMjFROTo4kqVWrVkpLS5OXl5caNGjgdFSrVq3IbXp7eys/P/+y17Rt21Y7duxwOr9z507VqVOn0Nf4+PgoMDDQ6QAAAACA0pgxY4YSEhIUHx+vyMhIzZ07V5UqVdK8efMKvX7BggX6xz/+oaioKDVu3FhvvPGG7Ha74/Y6MxR5u4qjR4+qf//+Gjp0qFq0aKGAgACtX79e06dP12233SZJio2NVXR0tPr06aPp06erUaNGOnTokL744gv17dtXbdq0KVJfERER+vHHH5Wamip/f39VqVJFHh4Fc9jHHntMd911lzp16qQuXbpo+fLl+vzzz5WSklLUtwUAAADAnbjD4i//7f+va5L4+PjIx8fH6VxeXp42bNigMWPGOM55eHgoNjZWa9euLVJ3p06d0tmzZ1WlSpVSBl5yxVqVtH379po5c6Y6deqkZs2aafz48UpISNDLL78s6fyU0KVLl6pTp06Kj49Xo0aNNGDAAO3bt08hISFFDmr06NHy9PRUZGSkqlevftGpoX379tXcuXM1ffp0NW/eXG+88YY++ugj3XjjjUXuCwAAAAAKEx4e7rRGyZQpUwpcc+TIEeXn5xfId0JCQpSWllakfp544gnVrFlTsbGxLom7JGyGYXY6bp7s7GwFBQWpxeBn5enta3Y4cAHfP4p3ryrcW9AP3AdcnuSHVjY7BLjYjgcrmh0CXGhvjzfMDgEukn3CrsqN9igrK6tM3Tp14Xfz2Jr3y8vD5/IvuILO2XP1zaF/6cCBA06fYWEVw0OHDqlWrVpas2aNoqOjHecff/xxrVy5Uj/++OMl+5o6daqmT5+ulJQUtWjRwrVvpBiKPJUUAAAAAK44Q24wlfT8/xRlXZJq1arJ09NT6enpTufT09MVGhp6yde+8MILmjp1qr755htTk0LJBYvPAAAAAIBVeXt7q3Xr1k4Lx1xYSObPFcS/mj59uiZPnqzly5cXeS2WK4mKIQAAAACUwqhRozR48GC1adNG7dq106xZs5STk6P4+HhJ0qBBg1SrVi3HPYrTpk3ThAkT9N577ykiIsJxL+KFfeDNQGIIAAAAwH240aqkRXXXXXcpMzNTEyZMUFpamqKiorR8+XLHgjT79+932mVhzpw5ysvL0x133OHUTmJioiZOnFjq8EuCxBAAAAAASmnEiBEaMWJEoc/9dTu91NTUKx9QMZEYAgAAAHAfdrskk1eat1tvpXsWnwEAAAAAiyMxBAAAAACLYyopAAAAAPdRBhefKQ+oGAIAAACAxZEYAgAAAIDFMZUUAAAAgPtgKqkpqBgCAAAAgMWRGAIAAACAxTGVFAAAAID7sBuSTJ7KaWcqKQAAAADAYqgYAgAAAHAbhmGXYdhNj8FqqBgCAAAAgMWRGAIAAACAxTGVFAAAAID7MAzzF39hH0MAAAAAgNWQGAIAAACAxTGVFAAAAID7MNxgH0OmkgIAAAAArIbEEAAAAAAsjqmkAAAAANyH3S7ZTN5gng3uAQAAAABWQ8UQAAAAgPtg8RlTUDEEAAAAAIsjMQQAAAAAi2MqKQAAAAC3YdjtMkxefMZg8RkAAAAAgNWQGAIAAACAxTGVFAAAAID7YFVSU1AxBAAAAACLo2IIAAAAwH3YDclGxfBqo2IIAAAAABZHYggAAAAAFsdUUgAAAADuwzAkmbyPIFNJAQAAAABWQ2IIAAAAABbHVFIAAAAAbsOwGzJMXpXUYCopAAAAAMBqSAwBAAAAwOKYSgoAAADAfRh2mb8qqcn9m4CKIQAAAABYHBVDAAAAAG6DxWfMQcUQAAAAACyOxBAAAAAALI6ppAAAAADcB4vPmIKKIQAAAABYnKUrhhduKs3PO2NyJHCVc2et99ed8uycPdfsEOBC+fmMZ3ljP20zOwS4UPYJ/j+0vMg+eX4sy+oCKud0VjI59HM6a24AJrAZZfUnxgV+//13hYeHmx0GAAAA4HIHDhzQNddcY3YYRXbmzBnVrVtXaWlpZociSQoNDdXevXvl6+trdihXhaUTQ7vdrkOHDikgIEA2W/n+q2d2drbCw8N14MABBQYGmh0OSonxLF8Yz/KF8SxfGM/yxSrjaRiGTpw4oZo1a8rDo2zdOXbmzBnl5eWZHYYkydvb2zJJoWTxqaQeHh5l6q8orhAYGFiu/0NoNYxn+cJ4li+MZ/nCeJYvVhjPoKAgs0MoEV9fX0slY+6kbP0JAQAAAADgciSGAAAAAGBxJIYW4ePjo8TERPn4+JgdClyA8SxfGM/yhfEsXxjP8oXxBC7O0ovPAAAAAACoGAIAAACA5ZEYAgAAAIDFkRgCAAAAgMWRGAIAAACAxZEYAgBgArvdbnYIcKHTp0+bHQJcKDs7W6zPCKshMYQDv6SUL1lZWTpy5Ij27NljdihwgYyMDG3evFmrV682OxS4wK5duzRr1iz9/vvvZocCF9iyZYt69erFeJYT27Zt00033aRly5YpLy/P7HCAq4bEEJKk7du36/HHH9fRo0fNDgUu8Msvv6hPnz7q0qWLWrVqpWeffdbskFAKW7duVbdu3TRkyBB16tRJCQkJZoeEUjhx4oT69u2ryZMna8GCBTp8+LDZIaEUNm/erLZt26p9+/a65pprJPGH1rJs+/bt6tSpk9q0aaMmTZrI29vb7JCAq8bL7ABgvt27dys2NlZpaWk6dOiQ5syZo6CgILPDQgn95z//UefOnXXffffp+uuvV0ZGhoYPH66GDRvqzjvvNDs8FNP27dsVExOjBx54QEOGDNH+/fvVvXt3Pfjgg4qKijI7PJRAxYoVVadOHVWqVEkvv/yyzp49q8GDBys8PNzs0FBMW7du1Q033KDRo0c7/gBnGIaOHz+uKlWqmBwdiisvL09jx45Vv3799PLLL8swDG3dulXp6em69tpr+Y6i3GODe4s7deqUxo4dq0OHDmngwIGKj49XTEyM3nzzTZLDMuj48eP629/+poYNG2rWrFmO83fffbcCAwP1r3/9S3a7XR4eTBYoC44ePap77rlHTZo0cRrPm2++WY8++qhyc3PVrFkz1alTx7wgUSwXvn8jR45U//799fPPP2vq1Kl66KGHNGrUKC1cuFD33nuv2WGiCNLT03XDDTeoRo0aWrt2rSTpwQcf1C+//KLffvtN/fv3V0JCgiIjI02OFEV19uxZxcTEaNq0abrxxhvVpUsXnT59WuvWrVN0dLRiYmKYgYNyjYqhxRmGocjISHXo0EG9evXSl19+qbi4ON13330kh2VQTk6OsrKy1KlTJ6fz9evX15o1aySJm+nLkHPnzikmJka9e/d2nHvmmWf01VdfKSsrSzt37lTTpk315JNP6uabbzYxUhTVhT/KVKtWTZ9++qmmT5+u48eP69VXX9XChQu1b98+xcXFqXr16iZHisvJy8tTmzZtdOTIEb300kv66KOPVLFiRXXp0kV33HGHnn76ae3Zs0cvvfSSateubXa4KALDMHTixAnt2bNHH330kXx9fTVnzhzl5eXpww8/1JIlSxQaGqqHHnrI7FCBK4KKIXTixAkFBAQ4Hv/000+6+eabFRMTo3nz5ikwMFD5+fnasWMHf/ksA7Zs2aIWLVpIOp9YeHl56fnnn9e3336rZcuWOa7LycmRn5+fWWGiiLKzsxUYGChJWrZsmfr166cFCxYoNjZWZ86cUWxsrKKjozV37lyTI0VRGIYhm82mN998U4sWLdLy5cslSa1atdK2bdv097//XZMmTVLVqlVNjhRFsXfvXj377LNasmSJWrZsqXfffdeR1G/dulXt2rXT9OnTSSTKAMMwlJ+fr0GDBsnb21tnzpzRPffc4/jD3B9//KGRI0fqzJkzWrhwocnRAlcG88nglBRKUtu2bbV06VKlpKRo6NChyszM1D//+U89+eSTOnHihElRoqguJIV2u11eXucnBXh7eysnJ8dxzbhx4zR16lTl5+ebEiOK7kJSKEmNGjXShg0b1LdvX/n5+al69eq64YYbtHPnTha7KCNsNpskqWPHjo5FLQYOHKiMjAwlJCRo2bJlmjFjhtLT080ME0VgGIbq1q2rsWPHaujQoXr00UcdSWF+fr6aN2+utm3bauvWrSZHiqKw2Wzy8vLS8OHD9e9//1sffPCBDh486Hi+cuXKatu2rXbu3KlTp06ZGClw5TCVFAUYhqF27dpp2bJl6tWrl5o3b65jx45p7dq1BZJIuK8/30dos9mUm5srSXrqqac0ZcoUrVu3Tp6enmaFhxKoX7++498eHh7Kz89XVlaW2rZty32jZYy3t7d27typ66+/Xvv27dNXX32l5s2ba+zYsfr000/1yCOPmB0iLsNms8kwDNWrV0+PPfaYKlWq5HjO09NTp06dUoUKFdS8eXMTo0Rx2O12dezYUe+//77uvPNOvffee4qKilJ0dLQk6bffflPDhg0df3QFyhumklpMcRce6devn1auXKmUlBQ1a9bsCkaGkrjceF54fubMmfruu+90ww03aPz48VqzZo1atWp1FSNFURT3+zl+/Hi99dZb+vbbb9WoUaMrGBlK4nLjOWzYMG3cuFFvvPGG0/fxyJEjqlat2tUIEcVQ3O/nU089pQULFujbb79V3bp1r2BkKInLjeenn36qQYMGqUmTJgoKClL16tW1ZMkSfffdd46ZOUB5w5+YLeLCtAcPDw/9+uuvl73eMAxNnjxZn3zyib755huSQjdT1PG88H96FSpU0KeffqqpU6dq9erVJIVuprjfz0WLFmngwIF6/fXX9fnnn5MUupmijucjjzyiTz/91PF9vDAdmPsL3Utxv58LFy7UgAED9K9//Usff/wxSaGbKcp4Goah2267Td99953uuOMOValSReHh4VqzZg1JIco1EkML2L9/v/7xj39o69at+vjjjxUZGalt27Zd8jV5eXlq0KCBtm3bxl5pbqYk49moUSNVqVJFK1euVJs2ba5SpCiKkoxnRESEvLy8tGLFCl133XVXKVIURXHGs2nTpk77ol34Q86F+xBhvpJ8P+vUqSO73a6VK1fy/XQzRR3PC9OEW7ZsqdGjR+vf//63nnvuORbgQ7nHVFILSElJ0ciRI+Xn56eNGzfq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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Sentence 1: Neural networks are a powerful machine learning technique.\n","Sentence 2: Deep learning models have many layers of neurons.\n","Sentence 3: Embeddings represent words or sentences as vectors.\n","Sentence 4: Vector representations help computers understand semantics.\n","Sentence 5: The history of AI begins in the 1950s.\n","Sentence 6: Artificial intelligence research has evolved over decades.\n"]}]},{"cell_type":"markdown","source":["## 4. Building a Vector Store with LlamaIndex\n","\n","Now, let's combine what we've learned to build a vector database:"],"metadata":{"id":"-9uZR_chFoZk"}},{"cell_type":"code","source":["from llama_index.core import VectorStoreIndex, StorageContext\n","from llama_index.vector_stores.chroma import ChromaVectorStore\n","import chromadb\n","\n","# Initialize a Chroma client\n","chroma_client = chromadb.Client()\n","chroma_collection = chroma_client.get_or_create_collection(\"semantic_search_demo\")\n","\n","# Create vector store\n","vector_store = ChromaVectorStore(chroma_collection=chroma_collection)\n","storage_context = StorageContext.from_defaults(vector_store=vector_store)\n","\n","# Let's use overlapping chunks for our index\n","embed_model = HuggingFaceEmbedding(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\n","\n","# Create index\n","index = VectorStoreIndex.from_documents(\n","    documents,\n","    storage_context=storage_context,\n","    embed_model=embed_model\n",")\n","\n","print(\"Vector store created successfully!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IXpl55ZPFxcd","executionInfo":{"status":"ok","timestamp":1751349453967,"user_tz":-480,"elapsed":2264,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"5f0bf8d0-238f-4bac-c3bd-9eec0f22d9c8"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["ERROR:chromadb.telemetry.product.posthog:Failed to send telemetry event ClientStartEvent: capture() takes 1 positional argument but 3 were given\n","ERROR:chromadb.telemetry.product.posthog:Failed to send telemetry event ClientCreateCollectionEvent: capture() takes 1 positional argument but 3 were given\n"]},{"output_type":"stream","name":"stdout","text":["Vector store created successfully!\n"]}]},{"cell_type":"markdown","source":["\n","## 5. Querying with Gemini\n","\n","Finally, let's use Gemini to query our vector database:"],"metadata":{"id":"lf9lFzT5FzVU"}},{"cell_type":"code","source":["from llama_index.llms.gemini import Gemini\n","\n","# Initialize Gemini LLM\n","llm = Gemini(model=\"models/gemini-1.5-flash\")\n","\n","# Set up query engine with our custom components\n","query_engine = index.as_query_engine(\n","    llm=llm,\n","    similarity_top_k=2  # Retrieve top 2 most similar chunks\n",")\n","\n","# Function to query and display results\n","def run_query(query_text):\n","    print(f\"Query: {query_text}\")\n","    print(\"-\" * 50)\n","\n","    # Get response\n","    response = query_engine.query(query_text)\n","\n","    print(\"Response:\")\n","    display(Markdown(response.response))\n","\n","    print(\"\\nSource Nodes:\")\n","    for i, node in enumerate(response.source_nodes):\n","        print(f\"\\nSource {i+1} (Score: {node.score:.4f}):\")\n","        print(\"-\" * 40)\n","        print(node.text)\n","\n","    return response\n","\n","# Try different queries\n","queries = [\n","    \"How did neural networks develop over time?\",\n","    \"What are embeddings and how are they used?\",\n","    \"Explain the history of artificial intelligence.\"\n","]\n","\n","# Run each query\n","for query in queries:\n","    run_query(query)\n","    print(\"\\n\" + \"=\"*80 + \"\\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Wx64iFwsF1wh","executionInfo":{"status":"ok","timestamp":1751348748876,"user_tz":-480,"elapsed":8286,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"79d6bb4a-0816-41d8-9a75-e3a375703dd5"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-15-1028938175.py:4: DeprecationWarning: Call to deprecated class Gemini. (Should use `llama-index-llms-google-genai` instead, using Google's latest unified SDK. See: https://docs.llamaindex.ai/en/stable/examples/llm/google_genai/)\n","  llm = Gemini(model=\"models/gemini-1.5-flash\")\n","ERROR:chromadb.telemetry.product.posthog:Failed to send telemetry event CollectionQueryEvent: capture() takes 1 positional argument but 3 were given\n"]},{"output_type":"stream","name":"stdout","text":["Query: How did neural networks develop over time?\n","--------------------------------------------------\n","Response:\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Markdown object>"],"text/markdown":"Early neural network models, like the perceptron, emerged in the late 1950s.  Later developments involved creating networks with multiple interconnected layers of nodes, leading to deep neural networks.  Specialized architectures like convolutional neural networks were developed for image processing, while recurrent neural networks and transformers were designed to handle sequential data.  The evolution of neural networks is closely tied to the broader history of artificial intelligence, with significant advancements occurring alongside the rise of machine learning and deep learning.\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Source Nodes:\n","\n","Source 1 (Score: 0.5048):\n","----------------------------------------\n","Neural networks are computing systems inspired by biological neural networks.\n","The perceptron, developed by Frank Rosenblatt in 1958, was one of the earliest neural network models.\n","Modern neural networks consist of layers of interconnected nodes or \"neurons.\"\n","Each connection can transmit a signal from one neuron to another.\n","The receiving neuron processes the signal and signals downstream neurons connected to it.\n","Deep neural networks contain multiple hidden layers between input and output layers.\n","Convolutional Neural Networks (CNNs) revolutionized image processing.\n","Recurrent Neural Networks (RNNs) and transformers handle sequential data like text or time series.\n","\n","Source 2 (Score: 0.4195):\n","----------------------------------------\n","Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods and rule-based systems.\n","In the 1980s, expert systems became popular but faced limitations.\n","The 1990s and early 2000s saw a shift towards machine learning approaches.\n","The deep learning revolution began around 2012 with breakthrough results in computer vision.\n","Today, large language models like GPT, LLaMA, and Gemini represent cutting-edge AI capabilities.\n","These models are trained on vast amounts of text data and can generate human-like responses.\n","\n","================================================================================\n","\n","Query: What are embeddings and how are they used?\n","--------------------------------------------------\n","Response:\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Markdown object>"],"text/markdown":"Embeddings are dense vector representations of data, mapping similar items closer together in a continuous vector space.  This applies to words, sentences, and entire documents.  They facilitate semantic search, going beyond keyword matching to find conceptually similar items.  Furthermore, they are crucial components in recommendation systems, clustering algorithms, and classification tasks.  Advanced models continually improve their performance in these applications.\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Source Nodes:\n","\n","Source 1 (Score: 0.3920):\n","----------------------------------------\n","Embeddings are dense vector representations of data in a continuous vector space.\n","Word embeddings map words to vectors where similar words are positioned closer together.\n","Popular word embedding techniques include Word2Vec, GloVe, and FastText.\n","Sentence embeddings capture meaning at the sentence level rather than individual words.\n","Models like Universal Sentence Encoder and SBERT create powerful sentence embeddings.\n","Document embeddings represent entire documents as fixed-length vectors.\n","Embeddings enable semantic search by finding documents with similar meaning, not just keyword matches.\n","They also power recommendation systems, clustering, and classification tasks.\n","Recent models like OpenAI's text-embedding-ada and Cohere's embedding models offer state-of-the-art performance.\n","\n","Source 2 (Score: 0.2302):\n","----------------------------------------\n","Neural networks are computing systems inspired by biological neural networks.\n","The perceptron, developed by Frank Rosenblatt in 1958, was one of the earliest neural network models.\n","Modern neural networks consist of layers of interconnected nodes or \"neurons.\"\n","Each connection can transmit a signal from one neuron to another.\n","The receiving neuron processes the signal and signals downstream neurons connected to it.\n","Deep neural networks contain multiple hidden layers between input and output layers.\n","Convolutional Neural Networks (CNNs) revolutionized image processing.\n","Recurrent Neural Networks (RNNs) and transformers handle sequential data like text or time series.\n","\n","================================================================================\n","\n","Query: Explain the history of artificial intelligence.\n","--------------------------------------------------\n","Response:\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Markdown object>"],"text/markdown":"Artificial intelligence's history began in the 1950s with the introduction of the term at the Dartmouth Conference.  Early work concentrated on symbolic methods and rule-based systems.  Expert systems gained prominence in the 1980s, though they had limitations.  The focus shifted toward machine learning in the 1990s and early 2000s.  A significant advancement, the deep learning revolution, started around 2012, leading to breakthroughs in areas like computer vision.  Currently, sophisticated large language models are at the forefront of AI capabilities, capable of producing human-quality text after being trained on extensive datasets.\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Source Nodes:\n","\n","Source 1 (Score: 0.4939):\n","----------------------------------------\n","Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods and rule-based systems.\n","In the 1980s, expert systems became popular but faced limitations.\n","The 1990s and early 2000s saw a shift towards machine learning approaches.\n","The deep learning revolution began around 2012 with breakthrough results in computer vision.\n","Today, large language models like GPT, LLaMA, and Gemini represent cutting-edge AI capabilities.\n","These models are trained on vast amounts of text data and can generate human-like responses.\n","\n","Source 2 (Score: 0.3229):\n","----------------------------------------\n","Artificial Intelligence is playing a growing role in addressing climate change.\n","AI models help in climate forecasting, emission tracking, and energy optimization.\n","Remote sensing data and machine learning improve precision agriculture.\n","Smart grids powered by AI enhance energy efficiency and demand forecasting.\n","Ethical concerns include data bias and resource usage in training large models.\n","Collaborations between scientists and technologists are key to maximizing impact responsibly.\n","\n","================================================================================\n","\n"]}]},{"cell_type":"markdown","source":["## 6. Interactive Experiments\n","\n","This section provides instructions and examples for hands-on experimentation with chunking and embedding techniques. Try these experiments to deepen your understanding."],"metadata":{"id":"3uF7bHqXF3P8"}},{"cell_type":"markdown","source":["### Experiment 1: Testing Different Chunking Parameters\n","\n","Try modifying the chunking parameters to see how they affect the results:"],"metadata":{"id":"FLCwp2DrJBGP"}},{"cell_type":"code","source":["# EXPERIMENT: Test different chunk sizes and overlaps\n","# Try these combinations and compare the results:\n","# 1. Small chunks (100 tokens) with no overlap\n","# 2. Medium chunks (300 tokens) with small overlap (30 tokens)\n","# 3. Large chunks (500 tokens) with larger overlap (100 tokens)\n","\n","# Example code to experiment with:\n","from llama_index.core.node_parser import SentenceSplitter\n","\n","# Example 1: Small chunks, no overlap\n","splitter_small = SentenceSplitter(chunk_size=100, chunk_overlap=0)\n","chunks_small = splitter_small.get_nodes_from_documents(documents)\n","print(f\"Small chunks: Created {len(chunks_small)} chunks\")\n","\n","# Example 2: Medium chunks with overlap\n","splitter_medium = SentenceSplitter(chunk_size=300, chunk_overlap=30)\n","chunks_medium = splitter_medium.get_nodes_from_documents(documents)\n","print(f\"Medium chunks: Created {len(chunks_medium)} chunks\")\n","\n","# Example 3: Large chunks with larger overlap\n","splitter_large = SentenceSplitter(chunk_size=500, chunk_overlap=100)\n","chunks_large = splitter_large.get_nodes_from_documents(documents)\n","print(f\"Large chunks: Created {len(chunks_large)} chunks\")\n","\n","# To inspect chunks, print a few examples:\n","def inspect_chunks(chunks, name):\n","    print(f\"\\n--- First chunk from {name} ---\")\n","    print(chunks[0].text[:200] + \"...\")  # Show first 200 chars of first chunk\n","    if len(chunks) > 1:\n","        print(f\"\\n--- Second chunk from {name} ---\")\n","        print(chunks[1].text[:200] + \"...\")  # Show first 200 chars of second chunk\n","\n","# Inspect samples from each chunking strategy\n","inspect_chunks(chunks_small, \"small chunks\")\n","inspect_chunks(chunks_medium, \"medium chunks\")\n","inspect_chunks(chunks_large, \"large chunks\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jQ5-FnQNJB04","executionInfo":{"status":"ok","timestamp":1751348748909,"user_tz":-480,"elapsed":24,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"cb805942-4e51-4157-a0c2-cf563a17c019"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Small chunks: Created 10 chunks\n","Medium chunks: Created 6 chunks\n","Large chunks: Created 6 chunks\n","\n","--- First chunk from small chunks ---\n","Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods ...\n","\n","--- Second chunk from small chunks ---\n","The deep learning revolution began around 2012 with breakthrough results in computer vision.\n","Today, large language models like GPT, LLaMA, and Gemini represent cutting-edge AI capabilities.\n","These mode...\n","\n","--- First chunk from medium chunks ---\n","Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods ...\n","\n","--- Second chunk from medium chunks ---\n","Artificial Intelligence is playing a growing role in addressing climate change.\n","AI models help in climate forecasting, emission tracking, and energy optimization.\n","Remote sensing data and machine learn...\n","\n","--- First chunk from large chunks ---\n","Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\n","Early AI research focused on symbolic methods ...\n","\n","--- Second chunk from large chunks ---\n","Artificial Intelligence is playing a growing role in addressing climate change.\n","AI models help in climate forecasting, emission tracking, and energy optimization.\n","Remote sensing data and machine learn...\n"]}]},{"cell_type":"markdown","source":["**Questions to consider:**\n","- How does changing chunk size affect the total number of chunks?\n","- What happens to semantic coherence as you decrease chunk size?\n","- How does overlap help maintain context between chunks?\n"],"metadata":{"id":"6EbuG84rJHWq"}},{"cell_type":"markdown","source":["### Experiment 2: Comparing Embedding Similarities\n","\n","Explore how different texts are related in embedding space:"],"metadata":{"id":"ujaNQZNdJJcN"}},{"cell_type":"code","source":["# EXPERIMENT: Compare embedding similarities between different texts\n","# Try creating embeddings for different sentence pairs and see how\n","# the similarity scores change based on semantic meaning\n","\n","import numpy as np\n","from sklearn.metrics.pairwise import cosine_similarity\n","from llama_index.embeddings.huggingface import HuggingFaceEmbedding\n","\n","# Initialize embedding model\n","embed_model = HuggingFaceEmbedding(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\n","\n","# Define pairs of sentences to compare\n","sentence_pairs = [\n","    # Similar topic, similar wording\n","    (\"Neural networks process data through interconnected nodes.\",\n","     \"Neural networks analyze information using connected neurons.\"),\n","\n","    # Similar topic, different wording\n","    (\"Embeddings transform text into vectors.\",\n","     \"Vector representations capture the semantic meaning of words.\"),\n","\n","    # Different topics\n","    (\"Neural networks are used in image recognition.\",\n","     \"Embeddings are used for semantic search.\"),\n","\n","    # Try your own pairs!\n","    # (\"Your custom sentence 1\", \"Your custom sentence 2\")\n","]\n","\n","# Calculate similarity for each pair\n","for i, (sent1, sent2) in enumerate(sentence_pairs):\n","    # Get embeddings\n","    emb1 = embed_model.get_text_embedding(sent1)\n","    emb2 = embed_model.get_text_embedding(sent2)\n","\n","    # Calculate similarity\n","    similarity = cosine_similarity([emb1], [emb2])[0][0]\n","\n","    # Print results\n","    print(f\"\\nPair {i+1}:\")\n","    print(f\"Sentence 1: {sent1}\")\n","    print(f\"Sentence 2: {sent2}\")\n","    print(f\"Similarity Score: {similarity:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gNd5s4DFJOP2","executionInfo":{"status":"ok","timestamp":1751348750289,"user_tz":-480,"elapsed":1382,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"2e4c3b41-ce37-48b0-b464-473085f2985e"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Pair 1:\n","Sentence 1: Neural networks process data through interconnected nodes.\n","Sentence 2: Neural networks analyze information using connected neurons.\n","Similarity Score: 0.6275\n","\n","Pair 2:\n","Sentence 1: Embeddings transform text into vectors.\n","Sentence 2: Vector representations capture the semantic meaning of words.\n","Similarity Score: 0.6206\n","\n","Pair 3:\n","Sentence 1: Neural networks are used in image recognition.\n","Sentence 2: Embeddings are used for semantic search.\n","Similarity Score: 0.3161\n"]}]},{"cell_type":"markdown","source":["**Questions to consider:**\n","- What similarity threshold would you use to consider two sentences as related?\n","- How does word choice affect similarity even when the meaning is similar?\n","- What happens if you try different embedding models?\n"],"metadata":{"id":"o9JuL54qJPgq"}},{"cell_type":"markdown","source":["\n","### Experiment 3: Custom Querying with Different Parameters\n","\n","Modify query parameters to see how they affect retrieval results:"],"metadata":{"id":"JvoKYWwvJR1P"}},{"cell_type":"code","source":["# EXPERIMENT: Test different query parameters and analyze results\n","# Try different values for top_k and observe how it affects\n","# the relevance of retrieved chunks\n","\n","from llama_index.llms.gemini import Gemini\n","\n","# Initialize Gemini LLM\n","llm = Gemini(model=\"models/gemini-1.5-flash\")\n","\n","# Sample queries to test\n","test_queries = [\n","    \"What are neural networks?\",\n","    \"How have embeddings evolved over time?\",\n","    \"Describe the history of AI development.\",\n","    # Add your own queries here!\n","]\n","\n","# Try different top_k values\n","top_k_values = [1, 2, 4]\n","\n","# Function to run a query with a specific top_k\n","def test_query(query_text, top_k):\n","    # Set up query engine\n","    query_engine = index.as_query_engine(\n","        llm=llm,\n","        similarity_top_k=top_k\n","    )\n","\n","    # Get response\n","    response = query_engine.query(query_text)\n","\n","    print(f\"\\nQuery: {query_text}\")\n","    print(f\"Using top_k = {top_k}\")\n","    print(\"-\" * 50)\n","    print(f\"Response: {response.response[:200]}...\")  # First 200 chars\n","\n","    print(f\"\\nRetrieved {len(response.source_nodes)} source nodes:\")\n","    for i, node in enumerate(response.source_nodes):\n","        print(f\"  Source {i+1} (Score: {node.score:.4f}): {node.text[:100]}...\")\n","\n","    return response\n","\n"],"metadata":{"id":"QxmOvc3JJUC7","colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1751348751021,"user_tz":-480,"elapsed":732,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"7c1a99c4-ccc4-4ce4-e99b-8ba37b5a2ef0"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-18-2954360829.py:8: DeprecationWarning: Call to deprecated class Gemini. (Should use `llama-index-llms-google-genai` instead, using Google's latest unified SDK. See: https://docs.llamaindex.ai/en/stable/examples/llm/google_genai/)\n","  llm = Gemini(model=\"models/gemini-1.5-flash\")\n"]}]},{"cell_type":"code","source":["# Example usage:\n","# Choose a query from test_queries and a top_k value to experiment with\n","test_query(test_queries[0], top_k=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":805},"id":"ffACI8fBJ405","executionInfo":{"status":"ok","timestamp":1751348752773,"user_tz":-480,"elapsed":1751,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"5d8c262f-ae89-4080-b380-8982228280e8"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Query: What are neural networks?\n","Using top_k = 2\n","--------------------------------------------------\n","Response: Neural networks are computing systems modeled after biological neural networks.  Early examples include the perceptron, and modern versions have layers of interconnected nodes, or neurons, that transm...\n","\n","Retrieved 2 source nodes:\n","  Source 1 (Score: 0.6201): Neural networks are computing systems inspired by biological neural networks.\n","The perceptron, develo...\n","  Source 2 (Score: 0.3652): Artificial Intelligence (AI) has a rich history dating back to the 1950s.\n","The term was first coined ...\n"]},{"output_type":"execute_result","data":{"text/plain":["Response(response='Neural networks are computing systems modeled after biological neural networks.  Early examples include the perceptron, and modern versions have layers of interconnected nodes, or neurons, that transmit signals to each other.  Deep versions have multiple layers between input and output.  Specialized types, such as Convolutional Neural Networks and Recurrent Neural Networks, are used for image processing and sequential data respectively.\\n', source_nodes=[NodeWithScore(node=TextNode(id_='0701b93c-c0e9-4771-aaea-93dd9ab3459a', embedding=None, metadata={'file_path': '/content/sample_docs/neural_networks.txt', 'file_name': 'neural_networks.txt', 'file_type': 'text/plain', 'file_size': 668, 'creation_date': '2025-07-01', 'last_modified_date': '2025-07-01'}, excluded_embed_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], excluded_llm_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], relationships={<NodeRelationship.SOURCE: '1'>: RelatedNodeInfo(node_id='5d003440-577a-40c2-8c91-94c8a7998004', node_type='4', metadata={'file_path': '/content/sample_docs/neural_networks.txt', 'file_name': 'neural_networks.txt', 'file_type': 'text/plain', 'file_size': 668, 'creation_date': '2025-07-01', 'last_modified_date': '2025-07-01'}, hash='741f87f97e7ba983e4298617f3feb3f6d8a8fb5153bfbbc88a691d24a8f5f9bf')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='Neural networks are computing systems inspired by biological neural networks.\\nThe perceptron, developed by Frank Rosenblatt in 1958, was one of the earliest neural network models.\\nModern neural networks consist of layers of interconnected nodes or \"neurons.\"\\nEach connection can transmit a signal from one neuron to another.\\nThe receiving neuron processes the signal and signals downstream neurons connected to it.\\nDeep neural networks contain multiple hidden layers between input and output layers.\\nConvolutional Neural Networks (CNNs) revolutionized image processing.\\nRecurrent Neural Networks (RNNs) and transformers handle sequential data like text or time series.', mimetype='text/plain', start_char_idx=0, end_char_idx=668, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), score=0.6201326041538273), NodeWithScore(node=TextNode(id_='20f224ee-e46a-418e-b4e4-9bdde295a53d', embedding=None, metadata={'file_path': '/content/sample_docs/ai_history.txt', 'file_name': 'ai_history.txt', 'file_type': 'text/plain', 'file_size': 648, 'creation_date': '2025-07-01', 'last_modified_date': '2025-07-01'}, excluded_embed_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], excluded_llm_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], relationships={<NodeRelationship.SOURCE: '1'>: RelatedNodeInfo(node_id='1f7c14f1-e22b-44f0-987b-063272b9771e', node_type='4', metadata={'file_path': '/content/sample_docs/ai_history.txt', 'file_name': 'ai_history.txt', 'file_type': 'text/plain', 'file_size': 648, 'creation_date': '2025-07-01', 'last_modified_date': '2025-07-01'}, hash='a085dfdcaf38ef3af9cc791c4a673745bd622b2cc76d42b0a4e68f9a94578674')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='Artificial Intelligence (AI) has a rich history dating back to the 1950s.\\nThe term was first coined by John McCarthy in 1956 at the Dartmouth Conference.\\nEarly AI research focused on symbolic methods and rule-based systems.\\nIn the 1980s, expert systems became popular but faced limitations.\\nThe 1990s and early 2000s saw a shift towards machine learning approaches.\\nThe deep learning revolution began around 2012 with breakthrough results in computer vision.\\nToday, large language models like GPT, LLaMA, and Gemini represent cutting-edge AI capabilities.\\nThese models are trained on vast amounts of text data and can generate human-like responses.', mimetype='text/plain', start_char_idx=0, end_char_idx=648, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), score=0.36515937592904724)], metadata={'0701b93c-c0e9-4771-aaea-93dd9ab3459a': {'file_path': '/content/sample_docs/neural_networks.txt', 'file_name': 'neural_networks.txt', 'file_type': 'text/plain', 'file_size': 668, 'creation_date': '2025-07-01', 'last_modified_date': '2025-07-01'}, '20f224ee-e46a-418e-b4e4-9bdde295a53d': {'file_path': '/content/sample_docs/ai_history.txt', 'file_name': 'ai_history.txt', 'file_type': 'text/plain', 'file_size': 648, 'creation_date': '2025-07-01', 'last_modified_date': '2025-07-01'}})"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["**Questions to consider:**\n","- How does increasing top_k affect response quality?\n","- Is there a point where adding more chunks decreases answer quality?\n","- How do different chunking strategies affect the retrieval results?"],"metadata":{"id":"efFolMt-JbJV"}},{"cell_type":"markdown","source":["### Experiment 4: Comparing Different Embedding Models\n","\n","Compare the performance of different embedding models:"],"metadata":{"id":"UKNzQ7OOJe-j"}},{"cell_type":"code","source":["# EXPERIMENT: Compare different embedding models\n","# See how model choice affects similarity calculations and retrieval\n","\n","from llama_index.embeddings.huggingface import HuggingFaceEmbedding\n","import time\n","\n","# Define embedding models to test\n","embedding_models = [\n","    \"sentence-transformers/all-MiniLM-L6-v2\",  # Small, fast model (384 dimensions)\n","    \"sentence-transformers/all-mpnet-base-v2\",  # More powerful (768 dimensions)\n","    # Add other models if desired\n","]\n","\n","# Test text\n","test_text = \"Embeddings transform words into numerical vectors that capture meaning.\"\n","\n","# Compare models\n","for model_name in embedding_models:\n","    print(f\"\\nTesting model: {model_name}\")\n","\n","    # Time the embedding generation\n","    start_time = time.time()\n","    embed_model = HuggingFaceEmbedding(model_name=model_name)\n","    embedding = embed_model.get_text_embedding(test_text)\n","    end_time = time.time()\n","\n","    # Print results\n","    print(f\"Dimensions: {len(embedding)}\")\n","    print(f\"First 5 values: {embedding[:5]}\")\n","    print(f\"Generation time: {end_time - start_time:.4f} seconds\")\n","\n","# Optional: Create a simple index with different embedding models and compare\n","# the retrieval results for the same query"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KTI_BzwzJc46","executionInfo":{"status":"ok","timestamp":1751348755638,"user_tz":-480,"elapsed":2863,"user":{"displayName":"Rebecca Wang","userId":"11914589388747439402"}},"outputId":"c646e42b-4429-4072-b77d-db6a70ed7d14"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Testing model: sentence-transformers/all-MiniLM-L6-v2\n","Dimensions: 384\n","First 5 values: [-0.0011335837189108133, -0.030347218737006187, 0.051215894520282745, -0.036967843770980835, 0.0163107942789793]\n","Generation time: 1.8215 seconds\n","\n","Testing model: sentence-transformers/all-mpnet-base-v2\n","Dimensions: 768\n","First 5 values: [-0.04178156703710556, 0.061772800981998444, -0.012062777765095234, 0.045359380543231964, 0.022207118570804596]\n","Generation time: 1.2366 seconds\n"]}]},{"cell_type":"markdown","source":["**Questions to consider:**\n","- How does embedding dimension affect performance and quality?\n","- Is the additional computation time for larger models worth the quality improvement?\n","- Which model would you choose for a production application and why?"],"metadata":{"id":"lomNItndJhbn"}},{"cell_type":"markdown","source":["## Key Takeaways\n","\n","1. **Chunking Strategies**:\n","   - Fixed-length chunking is simple but may break semantic coherence\n","   - Overlapping chunks help maintain context across boundaries\n","   - Semantic chunking preserves meaning-based segments but is more resource-intensive\n","\n","2. **Embedding Models**:\n","   - Different models offer varying dimensions and performance characteristics\n","   - Larger models typically provide better semantic understanding but are slower\n","   - Domain-specific models can outperform generic ones for specialized tasks\n","\n","3. **Retrieval Performance**:\n","   - The choice of chunking and embedding strategy significantly impacts retrieval quality\n","   - Tuning parameters like chunk size, overlap, and top_k affects results\n","   - The best approach depends on your specific documents and use case\n","\n","4. **LlamaIndex + Gemini Integration**:\n","   - Combining LlamaIndex's retrieval capabilities with Gemini's language capabilities creates powerful RAG systems\n","   - This modular approach lets you optimize each component separately\n","\n","### Next Steps:\n","\n","- Try different chunking strategies on your own documents\n","- Experiment with domain-specific embedding models\n","- Explore advanced retrievers like hierarchical or hybrid retrievers\n","- Fine-tune the system by adjusting response synthesis settings"],"metadata":{"id":"iyUXvpVUGJXO"}}]}